<props><auth><group caption="General"><prop caption="login" editor="textbox" value="[@login]" description="the {@link term.datainstruction data instruction} on how to log in to a service."/><prop caption="logout" editor="textbox" value="[@logout]" description="the {@link term.datainstruction data instruction} on how to log out of a service."/><prop caption="autostart" editor="checkbox" value="[@autostart]" description="whether to fire authrequired at startup. Defaults to true." values="true|false"/><prop caption="window" editor="textbox" value="[@window]" description="the id of the window element that offers a log in form to the user."/><prop caption="fail-state" editor="textbox" value="[@fail-state]" description="the id of the state element which is activated when logging in failed because the credentials where incorrect."/><prop caption="error-state" editor="textbox" value="[@error-state]" description="the id of the state element which is activated when logging in failed because of an error (i.e. network disconnected)."/><prop caption="login-state" editor="textbox" value="[@login-state]" description="the id of the state element which is activated when logging in succeeded."/><prop caption="waiting-state" editor="textbox" value="[@waiting-state]" description="the id of the state element which is activated when the user is waiting while the application is logging in."/><prop caption="logout-state" editor="textbox" value="[@logout-state]" description="the id of the state element which is activated when the user is logged out."/><prop caption="model" editor="textbox" value="[@model]" description="the id of the model element which gets the data loaded given at login success."/><prop caption="remember" editor="textbox" value="[@remember]" description="whether to remember the login credentials after the first successful login attempt. Will only be used i.c.w. RPC"/></group><events caption="Events"><prop caption="beforelogin" editor="textbox" value="[@beforelogin]" type="event" description="Fires before the log in request is sent to the service"/><prop caption="beforelogout" editor="textbox" value="[@beforelogout]" type="event" description="Fires before the log out request is sent to the service"/><prop caption="logincheck" editor="textbox" value="[@logincheck]" type="event" description="Fires when log in data is received. Login is sometimes very complex, this event is dispatched to allow a custom check if a log in succeeded."/><prop caption="loginfail" editor="textbox" value="[@loginfail]" type="event" description="Fires when a log in attempt has failed"/><prop caption="loginsuccess" editor="textbox" value="[@loginsuccess]" type="event" description="Fires when a log in attempt succeeded"/><prop caption="logoutcheck" editor="textbox" value="[@logoutcheck]" type="event" description="Fires when log out data is received. Login is sometimes very complex, this event is dispatched to allow a custom check if a log out succeeded."/><prop caption="logoutfail" editor="textbox" value="[@logoutfail]" type="event" description="Fires when a log out attempt has failed"/><prop caption="logoutsuccess" editor="textbox" value="[@logoutsuccess]" type="event" description="Fires when a log out attempt succeeded"/><prop caption="authrequired" editor="textbox" value="[@authrequired]" type="event" description="Fires when log in credentials are required, either because they are incorrect, or because they are unavailable."/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/></events></auth></props>