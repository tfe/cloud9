<?xml version="1.0" encoding="UTF-8"?><props><offline><group caption="General"><prop caption="progress" editor="textbox" value="[@progress]" description="the progress of the sync. A number between 0 and 1."/><prop caption="position" editor="textbox" value="[@position]" description="the progress of the sync."/><prop caption="length" editor="textbox" value="[@length]" description="the total length of items to sync."/><prop caption="syncing" editor="checkbox" value="[@syncing]" description="whether the application is syncing while coming online." values="true|false"/><prop caption="onLine" editor="checkbox" value="[@online]" description="whether the application is online. This property is false during sync." values="true|false"/><prop caption="resources" editor="dropdown" value="[@resources]" description="the resources that should be
kept offline and synced later. This is a pipe '|' seperated list."><item value="application">application</item><item value="models">models</item><item value="transactions">transactions</item><item value="queue">queue</item><item value="state">state</item></prop><prop caption="rdb-timeout" editor="textbox" value="[@rdb-timeout]" description="the number of milliseconds
after the remote databindings server considers a client
offline and destroys all saved offline messages."/><prop caption="version-get" editor="textbox" value="[@version-get]" description="a datainstruction for getting a version number of the current application"/><prop caption="providers" editor="dropdown" value="[@providers]" description="a pipe seperated list of possible providers."><item value="gears">gears</item></prop><prop caption="auto-install" editor="checkbox" value="[@auto-install]" description="whether the required plugin is installed when it's not installed yet." values="true|false"/><prop caption="detect-url" editor="textbox" value="[@detect-url]" description="a datainstruction for getting a version number of the current application"/><prop caption="detection" editor="dropdown" value="[@detection]" description="a pipe seperated list of possible providers."><item value="auto">auto</item><item value="manual">manual</item><item value="error">error</item></prop><prop caption="interval" editor="checkbox" value="[@interval]" description="whether the required plugin is installed when it's not installed yet." values="true|false"/><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether changes are stored realtime." values="true|false"/><prop caption="set" editor="textbox" value="[@set]" description="a datainstruction that stores the state of the application to an external data store."/></group><events caption="Events"><prop caption="losechanges" editor="textbox" value="[@losechanges]" type="event" description="Fires before the offline state is removed."/><prop caption="beforeoffline" editor="textbox" value="[@beforeoffline]" type="event" description="Fires before bringing the application offline."/><prop caption="afteroffline" editor="textbox" value="[@afteroffline]" type="event" description="Firest after the application is brought offline."/><prop caption="beforeonline" editor="textbox" value="[@beforeonline]" type="event" description="Fires before bringing the application online."/><prop caption="afteronline" editor="textbox" value="[@afteronline]" type="event" description="Fires after the application is brought online."/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading the offline state into this application."/><prop caption="sync" editor="textbox" value="[@sync]" type="event" description="Fires at each sync item's completion."/><prop caption="beforeinstall" editor="textbox" value="[@beforeinstall]" type="event" description="Fires before installation of an offline provider"/><prop caption="afterinstall" editor="textbox" value="[@afterinstall]" type="event" description="Fires after installation of an offline provider"/><prop caption="transactioncancel" editor="textbox" value="[@transactioncancel]" type="event" description="Fires before installation of an offline provider
enableable Cancels the installation of the offline provider"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></offline><http><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error occurs."/></events></http><include><group caption="General"><prop caption="src" editor="textbox" value="[@src]" description="the location of the aml file to include in this application."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></include><input><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the value of the bound data is
updated as the user types it, or only when this element looses focus or
the user presses enter." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the text of this element"/><prop caption="mask" editor="textbox" value="[@mask]" description="a complex input pattern that the user should
adhere to. This is a string which is a combination of special and normal
characters. Then comma seperated it has two options. The first option
specifies whether the non input characters (the chars not typed by the
user) are in the value of this element. The second option specifies the
character that is displayed when the user hasn't yet filled in a
character."/><prop caption="initial-message" editor="textbox" value="[@initial-message]" description="the message displayed by this element
when it doesn't have a value set. This property is inherited from parent
nodes. When none is found it is looked for on the appsettings element."/><prop caption="focusselect" editor="checkbox" value="[@focusselect]" description="whether the text in this element is
selected when this element receives focus." values="true|false"/><prop caption="type" editor="dropdown" value="[@type]" description="the type of input element."><item value="email">email</item><item value="url">url</item><item value="password">password</item><item value="datetime">datetime</item><item value="date">date</item><item value="month">month</item><item value="week">week</item><item value="time">time</item><item value="number">number</item><item value="range">range</item><item value="checkbox">checkbox</item><item value="radio">radio</item><item value="file">file</item><item value="submit">submit</item><item value="image">image</item><item value="reset">reset</item></prop></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="mouseup" editor="textbox" value="[@mouseup]" type="event" description="Fires when the user lets go of a mousebutton while over this element."/><prop caption="mousedown" editor="textbox" value="[@mousedown]" type="event" description="Fires when the user presses a mousebutton while over this element."/><prop caption="keyup" editor="textbox" value="[@keyup]" type="event" description="Fires when the user lets go of a keyboard button while this element is focussed."/><prop caption="clear" editor="textbox" value="[@clear]" type="event" description="Fires when the content of this element is cleared."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></input><fallback><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></fallback><choices><group caption="General"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></choices><nomedia><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></nomedia><teleport><group caption="General"><prop caption="url" editor="textbox" value="[@url]" description="the location of the server that is
recipient of the rpc messages."/><prop caption="route-server" editor="textbox" value="[@route-server]" description="String specifying the url to the route script."/><prop caption="autoroute" editor="checkbox" value="[@autoroute]" description="whether the call should be routed
through a proxy when a permission
error occurs due to the same domein policy." values="true|false"/><prop caption="timeout" editor="textbox" value="[@timeout]" description="the number of milliseconds after
which the call is considered timed out.
"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></teleport><dragdrop><group caption="General"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><events caption="Events"><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/></events></dragdrop><drag><group caption="General"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/><prop caption="match" editor="textbox" value="[@match]" description="an xpath statement querying the
{@link term.datanode data node} that is
dragged. If the query matches a node it
is allowed to be dropped. The xpath is
automatically prefixed by 'self::'."/><prop caption="copy" editor="textbox" value="[@copy]" description="a javascript expression that determines
whether the dragged element is a copy or
a move. Use event.ctrlKey to use the Ctrl
key to determine whether the element is copied."/></group><events caption="Events"><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></drag><drop><group caption="General"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/><prop caption="match" editor="textbox" value="[@match]" description="an xpath statement querying the
{@link term.datanode data node} that is
dragged. If the query matches a node it
is allowed to be dropped. The xpath is
automatically prefixed by 'self::'."/><prop caption="target" editor="textbox" value="[@target]" description="an xpath statement determining the new
parent of the dropped {@link term.datanode data node}.
The xpath is automatically prefixed by 'self::'."/><prop caption="action" editor="dropdown" value="[@action]" description="the action to perform when the
{@link term.datanode data node} is inserted."><item value="tree-append">tree-append</item><item value="list-append">list-append</item><item value="insert-before">insert-before</item></prop><prop caption="copy" editor="textbox" value="[@copy]" description="a javascript expression that determines
whether the drop is a copy or a move.
Use event.ctrlKey to use the Ctrl key to
determine whether the element is copied."/></group><events caption="Events"><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></drop><bindings><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></bindings><icon><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></icon><image><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></image><caption><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></caption><css><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></css><selectable><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></selectable><value><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></value><src><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></src><collapsed><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></collapsed><expanded><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></expanded><empty><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></empty><toc><group caption="General"><prop caption="represent" editor="textbox" value="[@represent]" description="the id of the element to display
navigation for."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></toc><portal><group caption="General"><prop caption="columns" editor="textbox" value="[@columns]" description="a comma seperated list of column sizes.
A column size can be specified in a number (size in pixels) or using
a number and a % sign to indicate a percentage.
Defaults to &quot;33%, 33%, 33%&quot;."/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><events caption="Events"><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></portal><column><group caption="General"><prop caption="icon" editor="textbox" value="[@icon]"/><prop caption="caption" editor="textbox" value="[@caption]"/><prop caption="width" editor="textbox" value="[@width]"/><prop caption="options" editor="textbox" value="[@options]"/><prop caption="editor" editor="textbox" value="[@editor]"/><prop caption="colspan" editor="textbox" value="[@colspan]"/><prop caption="align" editor="textbox" value="[@align]"/><prop caption="css" editor="textbox" value="[@css]"/><prop caption="tree" editor="checkbox" value="[@tree]" values="true|false"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></column><draggable><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></draggable><dockskin><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></dockskin><buttons><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></buttons><traverse><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></traverse><audio><group caption="Media"><prop caption="seeking" editor="checkbox" value="[@seeking]" values="true|false"/><prop caption="autoplay" editor="checkbox" value="[@autoplay]" values="true|false"/><prop caption="controls" editor="checkbox" value="[@controls]" values="true|false"/><prop caption="ready" editor="checkbox" value="[@ready]" values="true|false"/><prop caption="bufferedBytes" editor="textbox" value="[@bufferedbytes]"/><prop caption="totalBytes" editor="textbox" value="[@totalbytes]"/><prop caption="readyState" editor="textbox" value="[@readystate]"/><prop caption="position" editor="textbox" value="[@position]"/><prop caption="currentTime" editor="textbox" value="[@currenttime]"/><prop caption="volume" editor="textbox" value="[@volume]"/><prop caption="muted" editor="checkbox" value="[@muted]" values="true|false"/><prop caption="paused" editor="checkbox" value="[@paused]" values="true|false"/><prop caption="type" editor="textbox" value="[@type]"/><prop caption="src" editor="textbox" value="[@src]"/><prop caption="ID3" editor="textbox" value="[@id3]"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></audio><update><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/><prop caption="get" editor="textbox" value="[@get]"/><prop caption="parent" editor="textbox" value="[@parent]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></update><add><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/><prop caption="get" editor="checkbox" value="[@get]" values="true|false"/><prop caption="parent" editor="checkbox" value="[@parent]" values="true|false"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></add><rename><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></rename><remove><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></remove><copy><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></copy><move><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></move><check><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></check><change><group caption="General"><prop caption="match" editor="textbox" value="[@match]"/><prop caption="set" editor="textbox" value="[@set]"/><prop caption="undo" editor="textbox" value="[@undo]"/><prop caption="lock" editor="textbox" value="[@lock]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></change><flowchart><group caption="General"><prop caption="template" editor="textbox" value="[@template]" description="the data instruction to load the xml for the
template that defines all the elements which are available on the flowchart."/><prop caption="snap" editor="dropdown" value="[@snap]" description="snap block to grid; Default is false"><item value="true">true</item><item value="false">false</item><item value="Block">Block</item></prop><prop caption="grid-width" editor="textbox" value="[@grid-width]" description="horizontal grid size, Default is 48px"/><prop caption="grid-height" editor="textbox" value="[@grid-height]" description="vertical grid size, Default is 48px
"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="BaseList"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><group caption="Rename"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></flowchart><resize><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></resize><left><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></left><top><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></top><id><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></id><width><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></width><height><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></height><flipv><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></flipv><fliph><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></fliph><rotation><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></rotation><lock><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></lock><type><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></type><cap-pos><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></cap-pos><zindex><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></zindex><connection><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></connection><ref><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></ref><blockoutput><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></blockoutput><blockinput><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></blockinput><blocklabel><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></blocklabel><graph><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></graph><auth><group caption="General"><prop caption="login" editor="textbox" value="[@login]" description="the {@link term.datainstruction data instruction} on how to log in to a service."/><prop caption="logout" editor="textbox" value="[@logout]" description="the {@link term.datainstruction data instruction} on how to log out of a service."/><prop caption="autostart" editor="checkbox" value="[@autostart]" description="whether to fire authrequired at startup. Defaults to true." values="true|false"/><prop caption="window" editor="textbox" value="[@window]" description="the id of the window element that offers a log in form to the user."/><prop caption="fail-state" editor="textbox" value="[@fail-state]" description="the id of the state element which is activated when logging in failed because the credentials where incorrect."/><prop caption="error-state" editor="textbox" value="[@error-state]" description="the id of the state element which is activated when logging in failed because of an error (i.e. network disconnected)."/><prop caption="login-state" editor="textbox" value="[@login-state]" description="the id of the state element which is activated when logging in succeeded."/><prop caption="waiting-state" editor="textbox" value="[@waiting-state]" description="the id of the state element which is activated when the user is waiting while the application is logging in."/><prop caption="logout-state" editor="textbox" value="[@logout-state]" description="the id of the state element which is activated when the user is logged out."/><prop caption="model" editor="textbox" value="[@model]" description="the id of the model element which gets the data loaded given at login success."/><prop caption="remember" editor="textbox" value="[@remember]" description="whether to remember the login credentials after the first successful login attempt. Will only be used i.c.w. RPC"/></group><events caption="Events"><prop caption="beforelogin" editor="textbox" value="[@beforelogin]" type="event" description="Fires before the log in request is sent to the service"/><prop caption="beforelogout" editor="textbox" value="[@beforelogout]" type="event" description="Fires before the log out request is sent to the service"/><prop caption="logincheck" editor="textbox" value="[@logincheck]" type="event" description="Fires when log in data is received. Login is sometimes very complex, this event is dispatched to allow a custom check if a log in succeeded."/><prop caption="loginfail" editor="textbox" value="[@loginfail]" type="event" description="Fires when a log in attempt has failed"/><prop caption="loginsuccess" editor="textbox" value="[@loginsuccess]" type="event" description="Fires when a log in attempt succeeded"/><prop caption="logoutcheck" editor="textbox" value="[@logoutcheck]" type="event" description="Fires when log out data is received. Login is sometimes very complex, this event is dispatched to allow a custom check if a log out succeeded."/><prop caption="logoutfail" editor="textbox" value="[@logoutfail]" type="event" description="Fires when a log out attempt has failed"/><prop caption="logoutsuccess" editor="textbox" value="[@logoutsuccess]" type="event" description="Fires when a log out attempt succeeded"/><prop caption="authrequired" editor="textbox" value="[@authrequired]" type="event" description="Fires when log in credentials are required, either because they are incorrect, or because they are unavailable."/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/></events></auth><service><group caption="General"><prop caption="name" editor="textbox" value="[@name]" description="the unique identifier of the service"/><prop caption="login" editor="textbox" value="[@login]" description="the {@link term.datainstruction data instruction} on how to log in to a service"/><prop caption="logout" editor="textbox" value="[@logout]" description="the {@link term.datainstruction data instruction} on how to log out of a service"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></service><template><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></template><item><group caption="General"><prop caption="submenu" editor="textbox" value="[@submenu]" description="the id of the menu that is shown
when the user hovers over this menu item."/><prop caption="value" editor="textbox" value="[@value]" description="the value of this element."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement which works on the
xml context of the parent menu element to determine whether this
item is shown."/><prop caption="group" editor="textbox" value="[@group]" description="the name of the group this item belongs
to."/><prop caption="hotkey" editor="textbox" value="[@hotkey]" description="the key combination a user can press
to active the function of this element. Use any combination of
Ctrl, Shift, Alt, F1-F12 and alphanumerical characters. Use a
space, a minus or plus sign as a seperator."/><prop caption="icon" editor="textbox" value="[@icon]" description="the url of the image used as an icon or
a reference to an iconmap."/><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed on the item."/><prop caption="type" editor="dropdown" value="[@type]" description="the function of this item"><item value="item">item</item><item value="check">check</item><item value="radio">radio</item></prop><prop caption="checked" editor="checkbox" value="[@checked]" description="whether the item is checked." values="true|false"/><prop caption="selected" editor="checkbox" value="[@selected]" description="whether the item is selected." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether the item is active." values="true|false"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when a user presses the mouse button while over this element."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></item><modalwindow><group caption="General"><prop caption="modal" editor="checkbox" value="[@modal]" description="whether the window prevents access to the
layout below it." values="true|false"/><prop caption="center" editor="checkbox" value="[@center]" description="centers the window relative to it's parent's
containing rect when shown." values="true|false"/><prop caption="title" editor="textbox" value="[@title]" description="the text of the title."/><prop caption="icon" editor="textbox" value="[@icon]" description="the location of the image."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="BaseStateButtons"><prop caption="state" editor="dropdown" value="[@state]" description="the state of the window. The state can be a
combination of multiple states seperated by a pipe '|' character."><item value="normal">normal</item><item value="minimized">minimized</item><item value="maximized">maximized</item><item value="edit">edit</item><item value="closed">closed</item></prop><prop caption="buttons" editor="dropdown" value="[@buttons]" description="the buttons that the window displays. This
can be multiple values seperated by a pipe '|' character."><item value="min">min</item><item value="max">max</item><item value="close">close</item><item value="edit">edit</item></prop></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="show" editor="textbox" value="[@show]" type="event" description="Fires when the window is opened."/><prop caption="close" editor="textbox" value="[@close]" type="event" description="Fires when the window is closed."/><prop caption="editstart" editor="textbox" value="[@editstart]" type="event" description="Fires before the user edits the properties of this window. Used mostly for when this window is part of the {@link element.portal}."/><prop caption="editstop" editor="textbox" value="[@editstop]" type="event" description="Fires after the user edited the properties of this window. Used mostly for when this window is part of the {@link element.portal}."/><prop caption="statechange" editor="textbox" value="[@statechange]" type="event" description="Fires after the state of this window changed."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></modalwindow><toolwindow><group caption="General"><prop caption="modal" editor="checkbox" value="[@modal]" description="whether the window prevents access to the
layout below it." values="true|false"/><prop caption="center" editor="checkbox" value="[@center]" description="centers the window relative to it's parent's
containing rect when shown." values="true|false"/><prop caption="title" editor="textbox" value="[@title]" description="the text of the title."/><prop caption="icon" editor="textbox" value="[@icon]" description="the location of the image."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></toolwindow><window><group caption="General"><prop caption="modal" editor="checkbox" value="[@modal]" description="whether the window prevents access to the
layout below it." values="true|false"/><prop caption="center" editor="checkbox" value="[@center]" description="centers the window relative to it's parent's
containing rect when shown." values="true|false"/><prop caption="title" editor="textbox" value="[@title]" description="the text of the title."/><prop caption="icon" editor="textbox" value="[@icon]" description="the location of the image."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></window><xmpp><group caption="General"><prop caption="type" editor="dropdown" value="[@type]" description="The type of method used to connect
to the server. Defaults to 'binding'"><item value="poll">poll</item><item value="binding">binding</item></prop><prop caption="poll-timeout" editor="textbox" value="[@poll-timeout]" description="The number of milliseconds between
each poll-request"/><prop caption="resource" editor="textbox" value="[@resource]" description="Name that will identify this client as it
logs on the the Jabber network.
Defaults to the application name."/><prop caption="auto-register" editor="checkbox" value="[@auto-register]" description="Specifies if an entered username
should be registered on the Jabber
network automatically. Defaults to 'false'." values="true|false"/><prop caption="auto-accept" editor="textbox" value="[@auto-accept]" description="Specifies if an icoming presence
subscription request should be accepted
automatically. Defaults to 'true'"/><prop caption="auto-deny" editor="textbox" value="[@auto-deny]" description="Specifies if an icoming presence
subscription request should be denied
automatically. Defaults to 'false'"/><prop caption="model" editor="textbox" value="[@model]" description="Name of the model where roster and
(chat) messages will be synchronized to."/><prop caption="model-contents" editor="dropdown" value="[@model-contents]" description="Specifies the items that will be
stored inside the model. Defaults to 'all'"><item value="all">all</item><item value="roster">roster</item><item value="chat">chat</item><item value="typing">typing</item><item value="roster|typing">roster|typing</item><item value="roster|chat">roster|chat</item><item value="chat|typing">chat|typing</item></prop><prop caption="muc-host" editor="textbox" value="[@muc-host]" description="Domain name of the Multi User Chat
service of an XMPP server. Defaults
to the domain that is parsed from
{@link element.xmpp.url}."/><prop caption="muc-model" editor="textbox" value="[@muc-model]" description="Name of the model where chat messages
sent and received from Multi User
Chats will be synchronized to."/><prop caption="rdb-host" editor="textbox" value="[@rdb-host]" description="Domain name of the Remote
DataBindingservice of an XMPP server.
Defaults to the domain that is parsed
from {@link element.xmpp.url}."/><prop caption="rdb-model" editor="textbox" value="[@rdb-model]" description="Name of the model where Remote
DataBinding messages will be
synchronized to."/><prop caption="rdb-bot" editor="checkbox" value="[@rdb-bot]" description="Specifies if the this client will
connect to the XMPP server as a bot" values="true|false"/></group><group caption="Teleport"><prop caption="url" editor="textbox" value="[@url]" description="the location of the server that is
recipient of the rpc messages."/><prop caption="route-server" editor="textbox" value="[@route-server]" description="String specifying the url to the route script."/><prop caption="autoroute" editor="checkbox" value="[@autoroute]" description="whether the call should be routed
through a proxy when a permission
error occurs due to the same domein policy." values="true|false"/><prop caption="timeout" editor="textbox" value="[@timeout]" description="the number of milliseconds after
which the call is considered timed out.
"/></group><events caption="Events"><prop caption="authfailure" editor="textbox" value="[@authfailure]" type="event" description="Fires when the authentication process failed or halted."/><prop caption="connectionerror" editor="textbox" value="[@connectionerror]" type="event" description="Fires when the connection with the XMPP server dropped."/><prop caption="connected" editor="textbox" value="[@connected]" type="event" description="Fires when a login attempt has succeeded, and a session has been setup."/><prop caption="receivechat" editor="textbox" value="[@receivechat]" type="event" description="Fires when the user received a chat message from a contact."/><prop caption="datachange" editor="textbox" value="[@datachange]" type="event" description="Fires when a data-change message is received from one of the contacts."/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error occurs."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/></events></xmpp><actiontracker><group caption="General"><prop caption="position" editor="textbox" value="[@position]" description="the position within the total length (same value as undolength). Use this attribute to bind a slider's value attribute to."/><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether changes are immediately send to
the datastore, or held back until purge() is called." values="true|false"/></group><events caption="Events"><prop caption="afterchange" editor="textbox" value="[@afterchange]" type="event" description="Fires after a change to the action stack occurs"/><prop caption="beforechange" editor="textbox" value="[@beforechange]" type="event" description="Fires before a change to the action stack will occur"/><prop caption="actionfail" editor="textbox" value="[@actionfail]" type="event" description="Fires when an action fails to be sent to the server."/><prop caption="actionsuccess" editor="textbox" value="[@actionsuccess]" type="event" description="Fires when an action is successfully sent to the server."/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/></events></actiontracker><variable><group caption="General"><prop caption="name" editor="textbox" value="[@name]" description="the argument name."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the argument."/><prop caption="default" editor="textbox" value="[@default]" description="the default value of the argument. If
no value is specified when this function
is called, the default value is used."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></variable><param><group caption="General"><prop caption="name" editor="textbox" value="[@name]" description="the argument name."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the argument."/><prop caption="default" editor="textbox" value="[@default]" description="the default value of the argument. If
no value is specified when this function
is called, the default value is used."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></param><spinner><group caption="General"><prop caption="max" editor="textbox" value="[@max]" description="maximal allowed value, default is 64000"/><prop caption="min" editor="textbox" value="[@min]" description="minimal allowed value, default is -64000"/><prop caption="value" editor="textbox" value="[@value]" description="actual value displayed in component"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="mouseup" editor="textbox" value="[@mouseup]" type="event" description="Fires when the user lets go of a mousebutton while over this element."/><prop caption="mousedown" editor="textbox" value="[@mousedown]" type="event" description="Fires when the user presses a mousebutton while over this element."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></spinner><datagrid><group caption="General"><prop caption="iframe" editor="checkbox" value="[@iframe]" description="whether this element is rendered inside an iframe. This is only supported for IE. Default is false for datagrid and true for spreadsheet and propedit." values="true|false"/></group><group caption="BaseTree"><prop caption="openadd" editor="checkbox" value="[@openadd]" description="whether the tree expands the parent to which a node is added. Defaults to true." values="true|false"/><prop caption="startcollapsed" editor="checkbox" value="[@startcollapsed]" description="whether the tree collapses all nodes that contain children on load. Defaults to true." values="true|false"/><prop caption="nocollapse" editor="checkbox" value="[@nocollapse]" description="whether the user cannot collapse a node. Defaults to false." values="true|false"/><prop caption="singleopen" editor="checkbox" value="[@singleopen]" description="whether the tree will expand a node by a single click. Defaults to false." values="true|false"/><prop caption="prerender" editor="checkbox" value="[@prerender]" description="whether the tree will render all the nodes at load. Defaults to true." values="true|false"/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="Rename"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="expand" editor="textbox" value="[@expand]" type="event" description="Fires when a tree leaf is expanded from collapsed view to
reveal its children leaves."/><prop caption="collapse" editor="textbox" value="[@collapse]" type="event" description="Fires when a tree leaf is collapsed from expanded view to
conceal its children leaves."/><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this
element and then let's the mousebutton go."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></datagrid><description><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></description><color><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></color><contents><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></contents><skin><group caption="General"><prop caption="name" editor="textbox" value="[@name]" description="the name of the skinset."/><prop caption="src" editor="textbox" value="[@src]" description="the location of the skin definition."/><prop caption="media-path" editor="textbox" value="[@media-path]" description="the basepath for the images of the skin."/><prop caption="icon-path" editor="textbox" value="[@icon-path]" description="the basepath for the icons used in the elements using this skinset."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></skin><video><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="Media"><prop caption="seeking" editor="checkbox" value="[@seeking]" values="true|false"/><prop caption="autoplay" editor="checkbox" value="[@autoplay]" values="true|false"/><prop caption="controls" editor="checkbox" value="[@controls]" values="true|false"/><prop caption="ready" editor="checkbox" value="[@ready]" values="true|false"/><prop caption="bufferedBytes" editor="textbox" value="[@bufferedbytes]"/><prop caption="totalBytes" editor="textbox" value="[@totalbytes]"/><prop caption="readyState" editor="textbox" value="[@readystate]"/><prop caption="position" editor="textbox" value="[@position]"/><prop caption="currentTime" editor="textbox" value="[@currenttime]"/><prop caption="volume" editor="textbox" value="[@volume]"/><prop caption="muted" editor="checkbox" value="[@muted]" values="true|false"/><prop caption="paused" editor="checkbox" value="[@paused]" values="true|false"/><prop caption="type" editor="textbox" value="[@type]"/><prop caption="src" editor="textbox" value="[@src]"/><prop caption="ID3" editor="textbox" value="[@id3]"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></video><model><group caption="General"><prop caption="src" editor="textbox" value="[@src]" description="the data instruction on how to load data from the data source into this model."/><prop caption="submission" editor="textbox" value="[@submission]" description="the data instruction on how to record the data from the data source from this model."/><prop caption="session" editor="textbox" value="[@session]" description="the data instruction on how to store the session data from this model."/><prop caption="autoinit" editor="checkbox" value="[@autoinit]" description="whether to initialize the model immediately. If set to false you are expected to call init() when needed. This is useful when the system has to log in first." values="true|false"/><prop caption="save-original" editor="checkbox" value="[@save-original]" description="whether to save the original state of the data. This enables the use of the reset() call." values="true|false"/><prop caption="remote" editor="textbox" value="[@remote]" description="the id of the {@link element.remote} element to use for data synchronization between multiple clients."/></group><events caption="Events"><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before data is loaded into the model."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after data is loaded into the model."/><prop caption="beforesubmit" editor="textbox" value="[@beforesubmit]" type="event" description="Fires before data is submitted."/><prop caption="submiterror" editor="textbox" value="[@submiterror]" type="event" description="Fires when submitting data has failed."/><prop caption="submitsuccess" editor="textbox" value="[@submitsuccess]" type="event" description="Fires when submitting data was successfull."/><prop caption="aftersubmit" editor="textbox" value="[@aftersubmit]" type="event" description="Fires after submitting data."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while making a request for this element."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></model><list><group caption="General"><prop caption="appearance" editor="dropdown" value="[@appearance]" description="the type of select this element is.
This is an xforms property and only available if apf is compiled
with __WITH_XFORMS set to 1."><item value="full">full</item><item value="compact">compact</item><item value="minimal">minimal</item></prop><prop caption="mode" editor="dropdown" value="[@mode]" description="Sets the way this element interacts with the user."><item value="check">check</item><item value="radio">radio</item></prop><prop caption="more" editor="textbox" value="[@more]" description="Adds a new item to the list and lets the users
type in the new name. This is especially useful in the interface when
{@link element.list.attribute.mode} is set to check or radio. For instance in a form."/></group><group caption="BaseList"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><group caption="Rename"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when a user presses a mouse button while over this element."/><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></list><select><group caption="General"><prop caption="appearance" editor="dropdown" value="[@appearance]" description="the type of select this element is.
This is an xforms property and only available if apf is compiled
with __WITH_XFORMS set to 1."><item value="full">full</item><item value="compact">compact</item><item value="minimal">minimal</item></prop><prop caption="mode" editor="dropdown" value="[@mode]" description="Sets the way this element interacts with the user."><item value="check">check</item><item value="radio">radio</item></prop><prop caption="more" editor="textbox" value="[@more]" description="Adds a new item to the list and lets the users
type in the new name. This is especially useful in the interface when
{@link element.list.attribute.mode} is set to check or radio. For instance in a form."/></group><group caption="BaseList"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><group caption="Rename"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when a user presses a mouse button while over this element."/><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></select><select1><group caption="General"><prop caption="appearance" editor="dropdown" value="[@appearance]" description="the type of select this element is.
This is an xforms property and only available if apf is compiled
with __WITH_XFORMS set to 1."><item value="full">full</item><item value="compact">compact</item><item value="minimal">minimal</item></prop><prop caption="mode" editor="dropdown" value="[@mode]" description="Sets the way this element interacts with the user."><item value="check">check</item><item value="radio">radio</item></prop><prop caption="more" editor="textbox" value="[@more]" description="Adds a new item to the list and lets the users
type in the new name. This is especially useful in the interface when
{@link element.list.attribute.mode} is set to check or radio. For instance in a form."/></group><group caption="BaseList"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><group caption="Rename"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when a user presses a mouse button while over this element."/><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></select1><thumbnail><group caption="General"><prop caption="appearance" editor="dropdown" value="[@appearance]" description="the type of select this element is.
This is an xforms property and only available if apf is compiled
with __WITH_XFORMS set to 1."><item value="full">full</item><item value="compact">compact</item><item value="minimal">minimal</item></prop><prop caption="mode" editor="dropdown" value="[@mode]" description="Sets the way this element interacts with the user."><item value="check">check</item><item value="radio">radio</item></prop><prop caption="more" editor="textbox" value="[@more]" description="Adds a new item to the list and lets the users
type in the new name. This is especially useful in the interface when
{@link element.list.attribute.mode} is set to check or radio. For instance in a form."/></group><group caption="BaseList"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><group caption="Rename"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when a user presses a mouse button while over this element."/><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></thumbnail><errorbox><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></errorbox><quicksand><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></quicksand><services><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></services><validation><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></validation><splitter><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></splitter><gallery><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="BaseList"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></gallery><url><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></url><mediatype><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></mediatype><pager><group caption="General"><prop caption="range" editor="textbox" value="[@range]" description="determines how much page buttons is displayed"/><prop caption="previous" editor="textbox" value="[@previous]" description="determines the caption of &quot;go to previous page&quot; button"/><prop caption="next" editor="textbox" value="[@next]" description="determines the caption of &quot;go to next page&quot; button"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></pager><total><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></total><current><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></current><calendar><group caption="General"><prop caption="output-format" editor="textbox" value="[@output-format]" description="the format of the returned value. See {@link term.dateformat more about the date format}."/><prop caption="default" editor="dropdown" value="[@default]" description="the default date set when the calendar is opened."><item value="today">today</item></prop><prop caption="value" editor="textbox" value="[@value]" description="the date returned by calendar; should be in the format specified by the output-format attribute."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></calendar><comment/><lineselect><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></lineselect><upload><group caption="General"><prop caption="value" editor="textbox" value="[@value]" description="the path of the file to uploaded,
or the online path after upload."/><prop caption="target" editor="textbox" value="[@target]" description="URL to the server-side script
(relative URLs are changed automatically
to absolute paths)."/><prop caption="method" editor="textbox" value="[@method]" description="if the method is get, data is
appended as query-string to the URL.
The upload will always be a POST request.
Defaults to 'post'."/><prop caption="rel" editor="textbox" value="[@rel]" description="the AML element the file input should
retrieve its dimensions from"/><prop caption="type-filter" editor="textbox" value="[@type-filter]" description="key/value pairs are used as filters
for the dialog.
Defaults to NULL."/><prop caption="multiple" editor="checkbox" value="[@multiple]" description="If true, the browse-dialog allows
multiple-file selection.
Defaults to TRUE." values="true|false"/><prop caption="queued" editor="textbox" value="[@queued]" description="maximum of currently running files.
If this is false, all files are uploaded
at once. Defaults to '1'."/><prop caption="policyfile" editor="textbox" value="[@policyfile]" description="location the cross-domain policy file.
{@link http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/system/Security.html#loadPolicyFile%28%29 Flash Security.loadPolicyFile}"/><prop caption="data" editor="textbox" value="[@data]" description="key/data values that are sent with
the upload requests."/><prop caption="merge-data" editor="checkbox" value="[@merge-data]" description="If true, the data option from uploader
and file is merged (prioritised file
data). Defaults to TRUE." values="true|false"/><prop caption="fieldname" editor="textbox" value="[@fieldname]" description="the key of the uploaded file on your
server, similar to name in a file-input.
Linux Flash ignores it, better avoid it.
Defaults to 'Filedata'."/><prop caption="filesize-min" editor="textbox" value="[@filesize-min]" description="validates the minimal size of a
selected file byte.
Defaults to '1'."/><prop caption="filesize-max" editor="textbox" value="[@filesize-max]" description="validates the maximal size of a
selected file
(official limit is 100 MB for
FileReference, I tested up to 2 GB)
Defaults to '0'."/><prop caption="allow-duplicates" editor="checkbox" value="[@allow-duplicates]" description="validates that no duplicate files
are added.
Defaults to FALSE." values="true|false"/><prop caption="time-limit" editor="textbox" value="[@time-limit]" description="timeout in seconds. If the upload
is without progress, it is cancelled
and event complete gets fired (with
error string timeout).
Occurs usually when the server sends
an empty response (also on redirects).
Defaults to '30', '0' for linux."/><prop caption="noflash" editor="checkbox" value="[@noflash]" description="whether to use flash, or fallback
immediately to the 'old-fashioned'
HTML uploader.
" values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="afterbrowse" editor="textbox" value="[@afterbrowse]" type="event" description="Fires after the user has made a selection."/><prop caption="uploaded" editor="textbox" value="[@uploaded]" type="event" description="Fires when the upload succeeded, was cancelled or failed."/><prop caption="timeout" editor="textbox" value="[@timeout]" type="event" description="Fires when the upload timed out."/><prop caption="beforeuploaded" editor="textbox" value="[@beforeuploaded]" type="event" description="Fires before data is uploaded."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></upload><dropdown><group caption="General"><prop caption="initial-message" editor="textbox" value="[@initial-message]" description="the message displayed by this element
when it doesn't have a value set. This property is inherited from parent
nodes. When none is found it is looked for on the appsettings element."/><prop caption="maxitems" editor="textbox" value="[@maxitems]" description="the number of items that are shown at the
same time in the container."/></group><group caption="BaseList"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="slidedown" editor="textbox" value="[@slidedown]" type="event" description="Fires when the calendar slides open."/><prop caption="slideup" editor="textbox" value="[@slideup]" type="event" description="Fires when the calendar slides up."/><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></dropdown><contextmenu><group caption="General"><prop caption="menu" editor="textbox" value="[@menu]" description="the id of the menu element."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath executed on the selected element of the databound element which determines whether this contextmenu is shown."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></contextmenu><menu><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="display" editor="textbox" value="[@display]" type="event" description="Fires when the contextmenu is shown."/><prop caption="itemclick" editor="textbox" value="[@itemclick]" type="event" description="Fires when a user presses the mouse button while over a child of this element."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></menu><palette><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="createcustom" editor="textbox" value="[@createcustom]" type="event" description="Fires when a custom color is choosen. This event allows the developer to display a color picker to fill the palette's color."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></palette><secret><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the value of the bound data is
updated as the user types it, or only when this element looses focus or
the user presses enter." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the text of this element"/><prop caption="mask" editor="textbox" value="[@mask]" description="a complex input pattern that the user should
adhere to. This is a string which is a combination of special and normal
characters. Then comma seperated it has two options. The first option
specifies whether the non input characters (the chars not typed by the
user) are in the value of this element. The second option specifies the
character that is displayed when the user hasn't yet filled in a
character."/><prop caption="initial-message" editor="textbox" value="[@initial-message]" description="the message displayed by this element
when it doesn't have a value set. This property is inherited from parent
nodes. When none is found it is looked for on the appsettings element."/><prop caption="focusselect" editor="checkbox" value="[@focusselect]" description="whether the text in this element is
selected when this element receives focus." values="true|false"/><prop caption="type" editor="dropdown" value="[@type]" description="the type or function this element represents.
This can be any arbitrary name. Although there are some special values."><item value="username">username</item><item value="password">password</item></prop></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="mouseup" editor="textbox" value="[@mouseup]" type="event" description="Fires when the user lets go of a mousebutton while over this element."/><prop caption="mousedown" editor="textbox" value="[@mousedown]" type="event" description="Fires when the user presses a mousebutton while over this element."/><prop caption="keyup" editor="textbox" value="[@keyup]" type="event" description="Fires when the user lets go of a keyboard button while this element is focussed."/><prop caption="clear" editor="textbox" value="[@clear]" type="event" description="Fires when the content of this element is cleared."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></secret><textarea><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the value of the bound data is
updated as the user types it, or only when this element looses focus or
the user presses enter." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the text of this element"/><prop caption="mask" editor="textbox" value="[@mask]" description="a complex input pattern that the user should
adhere to. This is a string which is a combination of special and normal
characters. Then comma seperated it has two options. The first option
specifies whether the non input characters (the chars not typed by the
user) are in the value of this element. The second option specifies the
character that is displayed when the user hasn't yet filled in a
character."/><prop caption="initial-message" editor="textbox" value="[@initial-message]" description="the message displayed by this element
when it doesn't have a value set. This property is inherited from parent
nodes. When none is found it is looked for on the appsettings element."/><prop caption="focusselect" editor="checkbox" value="[@focusselect]" description="whether the text in this element is
selected when this element receives focus." values="true|false"/><prop caption="type" editor="dropdown" value="[@type]" description="the type or function this element represents.
This can be any arbitrary name. Although there are some special values."><item value="username">username</item><item value="password">password</item></prop></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="mouseup" editor="textbox" value="[@mouseup]" type="event" description="Fires when the user lets go of a mousebutton while over this element."/><prop caption="mousedown" editor="textbox" value="[@mousedown]" type="event" description="Fires when the user presses a mousebutton while over this element."/><prop caption="keyup" editor="textbox" value="[@keyup]" type="event" description="Fires when the user lets go of a keyboard button while this element is focussed."/><prop caption="clear" editor="textbox" value="[@clear]" type="event" description="Fires when the content of this element is cleared."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></textarea><textbox><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the value of the bound data is
updated as the user types it, or only when this element looses focus or
the user presses enter." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the text of this element"/><prop caption="mask" editor="textbox" value="[@mask]" description="a complex input pattern that the user should
adhere to. This is a string which is a combination of special and normal
characters. Then comma seperated it has two options. The first option
specifies whether the non input characters (the chars not typed by the
user) are in the value of this element. The second option specifies the
character that is displayed when the user hasn't yet filled in a
character."/><prop caption="initial-message" editor="textbox" value="[@initial-message]" description="the message displayed by this element
when it doesn't have a value set. This property is inherited from parent
nodes. When none is found it is looked for on the appsettings element."/><prop caption="focusselect" editor="checkbox" value="[@focusselect]" description="whether the text in this element is
selected when this element receives focus." values="true|false"/><prop caption="type" editor="dropdown" value="[@type]" description="the type or function this element represents.
This can be any arbitrary name. Although there are some special values."><item value="username">username</item><item value="password">password</item></prop></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="mouseup" editor="textbox" value="[@mouseup]" type="event" description="Fires when the user lets go of a mousebutton while over this element."/><prop caption="mousedown" editor="textbox" value="[@mousedown]" type="event" description="Fires when the user presses a mousebutton while over this element."/><prop caption="keyup" editor="textbox" value="[@keyup]" type="event" description="Fires when the user lets go of a keyboard button while this element is focussed."/><prop caption="clear" editor="textbox" value="[@clear]" type="event" description="Fires when the content of this element is cleared."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></textbox><password><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the value of the bound data is
updated as the user types it, or only when this element looses focus or
the user presses enter." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the text of this element"/><prop caption="mask" editor="textbox" value="[@mask]" description="a complex input pattern that the user should
adhere to. This is a string which is a combination of special and normal
characters. Then comma seperated it has two options. The first option
specifies whether the non input characters (the chars not typed by the
user) are in the value of this element. The second option specifies the
character that is displayed when the user hasn't yet filled in a
character."/><prop caption="initial-message" editor="textbox" value="[@initial-message]" description="the message displayed by this element
when it doesn't have a value set. This property is inherited from parent
nodes. When none is found it is looked for on the appsettings element."/><prop caption="focusselect" editor="checkbox" value="[@focusselect]" description="whether the text in this element is
selected when this element receives focus." values="true|false"/><prop caption="type" editor="dropdown" value="[@type]" description="the type or function this element represents.
This can be any arbitrary name. Although there are some special values."><item value="username">username</item><item value="password">password</item></prop></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></password><script><group caption="General"><prop caption="src" editor="textbox" value="[@src]" description="the location of the script file."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></script><tree><group caption="General"><prop caption="get" editor="textbox" value="[@get]" description="the {@link term.datainstruction data instruction} that is used to load the new data."/><prop caption="mode" editor="dropdown" value="[@mode]" description="Sets the way this element interacts with the user."><item value="check">check</item><item value="radio">radio</item></prop></group><group caption="BaseTree"><prop caption="openadd" editor="checkbox" value="[@openadd]" description="whether the tree expands the parent to which a node is added. Defaults to true." values="true|false"/><prop caption="startcollapsed" editor="checkbox" value="[@startcollapsed]" description="whether the tree collapses all nodes that contain children on load. Defaults to true." values="true|false"/><prop caption="nocollapse" editor="checkbox" value="[@nocollapse]" description="whether the user cannot collapse a node. Defaults to false." values="true|false"/><prop caption="singleopen" editor="checkbox" value="[@singleopen]" description="whether the tree will expand a node by a single click. Defaults to false." values="true|false"/><prop caption="prerender" editor="checkbox" value="[@prerender]" description="whether the tree will render all the nodes at load. Defaults to true." values="true|false"/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="Rename"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="expand" editor="textbox" value="[@expand]" type="event" description="Fires when a tree leaf is expanded from collapsed view to
reveal its children leaves."/><prop caption="collapse" editor="textbox" value="[@collapse]" type="event" description="Fires when a tree leaf is collapsed from expanded view to
conceal its children leaves."/><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this
element and then let's the mousebutton go."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></tree><checked><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></checked><bar><group caption="General"><prop caption="icon" editor="textbox" value="[@icon]" description="the url pointing to the icon image."/><prop caption="collapsed" editor="checkbox" value="[@collapsed]" description="collapse panel on load, default is false" values="true|false"/><prop caption="title" editor="textbox" value="[@title]" description="describes content in panel"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></bar><panel><group caption="General"><prop caption="caption" editor="textbox" value="[@caption]" description="the text of the caption."/><prop caption="icon" editor="textbox" value="[@icon]" description="the url pointing to the icon image."/><prop caption="collapsed" editor="checkbox" value="[@collapsed]" description="collapse panel on load, default is false" values="true|false"/><prop caption="title" editor="textbox" value="[@title]" description="describes content in panel"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></panel><menubar><group caption="General"><prop caption="icon" editor="textbox" value="[@icon]" description="the url pointing to the icon image."/><prop caption="collapsed" editor="checkbox" value="[@collapsed]" description="collapse panel on load, default is false" values="true|false"/><prop caption="title" editor="textbox" value="[@title]" description="describes content in panel"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></menubar><section><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></section><actions><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></actions><caldropdown><group caption="General"><prop caption="output-format" editor="textbox" value="[@output-format]" description="the format of the returned date; See {@link term.dateformat more about the date format}."/><prop caption="initial-message" editor="textbox" value="[@initial-message]" description="the message displayed by this element
when it doesn't have a value set. This property is inherited from parent
nodes. When none is found it is looked for on the appsettings element."/><prop caption="caption-format" editor="textbox" value="[@caption-format]" description="the format of the displayed date. Default is yyyy-mm-dd. See {@link term.dateformat more about the date format}."/><prop caption="default" editor="dropdown" value="[@default]" description="the default date set when the calendar is opened."><item value="today">today</item></prop><prop caption="value" editor="textbox" value="[@value]" description="the date returned by calendar; should be in the format specified by the output-format attribute."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="slidedown" editor="textbox" value="[@slidedown]" type="event" description="Fires when the calendar slides open."/><prop caption="slideup" editor="textbox" value="[@slideup]" type="event" description="Fires when the calendar slides up."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></caldropdown><radiobutton><group caption="General"><prop caption="group" editor="textbox" value="[@group]" description="the name of the group to which this radio
button belongs. Only one item in the group can be checked at the same
time. When no group is specified the parent container functions as the
group; only one radiobutton within that parent can be checked."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the tooltip of this radio button."/><prop caption="icon" editor="textbox" value="[@icon]" description="the icon for this radiobutton"/><prop caption="label" editor="textbox" value="[@label]" description="the label for this radiobutton"/><prop caption="checked" editor="textbox" value="[@checked]" description="whether this radiobutton is the checked one in the group it belongs to."/><prop caption="background" editor="textbox" value="[@background]" description="sets a multistate background. The arguments
are seperated by pipes '|' and are in the order of:
'imagefilename|mapdirection|nrofstates|imagesize'
The mapdirection argument may have the value of 'vertical' or 'horizontal'.
The nrofstates argument specifies the number of states the iconfile contains:
1 - normal
2 - normal, hover
3 - normal, hover, down
4 - normal, hover, down, disabled
The imagesize argument specifies how high or wide each icon is inside the
map, depending of the mapdirection argument.
"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></radiobutton><group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></group><style><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></style><page><group caption="General"><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed on the button of this element."/><prop caption="fake" editor="checkbox" value="[@fake]" description="whether this page actually contains elements or
only provides a button in the pageable parent element." values="true|false"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></page><submitform><group caption="BaseTab"><prop caption="activepagenr" editor="textbox" value="[@activepagenr]" description="the child number of the active page."/><prop caption="activepage" editor="textbox" value="[@activepage]" description="the name of the active page."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="beforeswitch" editor="textbox" value="[@beforeswitch]" type="event" description="Fires before this element switches to another page."/><prop caption="afterswitch" editor="textbox" value="[@afterswitch]" type="event" description="Fires after this element has switched to another page."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></submitform><xforms><group caption="BaseTab"><prop caption="activepagenr" editor="textbox" value="[@activepagenr]" description="the child number of the active page."/><prop caption="activepage" editor="textbox" value="[@activepage]" description="the name of the active page."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="beforeswitch" editor="textbox" value="[@beforeswitch]" type="event" description="Fires before this element switches to another page."/><prop caption="afterswitch" editor="textbox" value="[@afterswitch]" type="event" description="Fires after this element has switched to another page."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></xforms><notifier><group caption="General"><prop caption="position" editor="dropdown" value="[@position]" description="Vertical and horizontal element's start
position, it can be changed in any time,
default is 'top-right'"><item value="top-right">top-right</item><item value="top-left">top-left</item><item value="bottom-right">bottom-right</item><item value="bottom-left">bottom-left</item><item value="center-center">center-center</item><item value="right-top">right-top</item><item value="left-top">left-top</item><item value="right-bottom">right-bottom</item><item value="left-bottom">left-bottom</item><item value="center-center">center-center</item></prop><prop caption="margin" editor="textbox" value="[@margin]" description="It's a free space around popup element,
default is '10 10 10 10' pixels"/><prop caption="columnsize" editor="textbox" value="[@columnsize]" description="Specify element width and col width where
element will be displayed, default is 300 pixels"/><prop caption="arrange" editor="dropdown" value="[@arrange]" description="popup elements can be displayed in rows
or columns, default is 'vertical'"><item value="vertical">vertical</item><item value="horizontal">horizontal</item></prop><prop caption="timeout" editor="textbox" value="[@timeout]" description="After the timeout has passed the popup
will dissapear automatically. When the
mouse hovers over the popup it doesn't
dissapear, default is 2 seconds
$attribute   {String}   onclick      It's an action executed after user click
on notifier cloud"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></notifier><toolbar><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></toolbar><colorpicker><group caption="General"><prop caption="color" editor="textbox" value="[@color]" description="the color that is selected in the color picker."/><prop caption="value" editor="textbox" value="[@value]" description="the color that is selected in the color picker."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></colorpicker><divider><group caption="General"><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed in the area defined by this
element."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></divider><vbox><group caption="General"><prop caption="padding" editor="textbox" value="[@padding]" description="the space between each element. Defaults to 2."/><prop caption="edge" editor="textbox" value="[@edge]" description="the space between the container and the elements, space seperated in pixels for each side. Similar to css in the sequence top right bottom left. Defaults to &quot;5 5 5 5&quot;."/><prop caption="pack" editor="dropdown" value="[@pack]"><item value="start">start</item><item value="middle">middle</item><item value="end">end</item></prop><prop caption="stretch" editor="checkbox" value="[@stretch]" values="true|false"/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></vbox><hbox><group caption="General"><prop caption="padding" editor="textbox" value="[@padding]" description="the space between each element. Defaults to 2."/><prop caption="edge" editor="textbox" value="[@edge]" description="the space between the container and the elements, space seperated in pixels for each side. Similar to css in the sequence top right bottom left. Defaults to &quot;5 5 5 5&quot;."/><prop caption="pack" editor="dropdown" value="[@pack]"><item value="start">start</item><item value="middle">middle</item><item value="end">end</item></prop><prop caption="stretch" editor="checkbox" value="[@stretch]" values="true|false"/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></hbox><browser><group caption="General"><prop caption="src" editor="textbox" value="[@src]" description="the url to be displayed in this element"/><prop caption="value" editor="textbox" value="[@value]" description="alias for the 'url' attribute"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="load" editor="textbox" value="[@load]" type="event"/><prop caption="error" editor="textbox" value="[@error]" type="event"/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></browser><accordion><group caption="General"><prop caption="animtype" editor="dropdown" value="[@animtype]" description="animation effect for slide in and slide out, default is &quot;normal normal&quot;"><item value="normal">normal</item><item value="easein">easein</item><item value="easeout">easeout</item><item value="none">none</item></prop><prop caption="animdelay" editor="textbox" value="[@animdelay]" description="the time between each step of animation, default is 10 ms."/><prop caption="multiexpand" editor="checkbox" value="[@multiexpand]" description="allows expanding one or more bars, default is true" values="true|false"/><prop caption="expand" editor="dropdown" value="[@expand]" description="sets event which activate bar, default is click"><item value="click">click</item><item value="hover">hover</item></prop><prop caption="startexpanded" editor="checkbox" value="[@startexpanded]" description="expands all bars on load, default is false" values="true|false"/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></accordion><event><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user clicks on the representation of this event."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></event><source><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></source><flashplayer><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></flashplayer><series><group caption="General"><prop caption="formula" editor="textbox" value="[@formula]"/><prop caption="length" editor="textbox" value="[@length]"/><prop caption="delimiter" editor="textbox" value="[@delimiter]"/><prop caption="split" editor="textbox" value="[@split]"/><prop caption="css" editor="textbox" value="[@css]"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></series><defaults><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></defaults><iconmap><group caption="General"><prop caption="src" editor="textbox" value="[@src]" description="the location of the image."/><prop caption="type" editor="dropdown" value="[@type]" description="the spatial distribution of the icons within the image."><item value="horizontal">horizontal</item><item value="vertically">vertically</item></prop><prop caption="size" editor="textbox" value="[@size]" description="the width and height in pixels of an icon. Use this for square icons."/><prop caption="width" editor="textbox" value="[@width]" description="the width of an icon in pixels."/><prop caption="height" editor="textbox" value="[@height]" description="the height of an icon in pixels."/><prop caption="offset" editor="textbox" value="[@offset]" description="the distance from the calculated grid point that has to be added. This value consists of two numbers seperated by a comma. Defaults to 0,0."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></iconmap><progress><group caption="General"><prop caption="autostart" editor="checkbox" value="[@autostart]" description="whether the progressbar starts automatically." values="true|false"/><prop caption="autohide" editor="checkbox" value="[@autohide]" description="whether the progressbar hides when the progress is at 100%. Setting this to true will hide the progressbar at start when autostart is not set to true." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the position of the progressbar stated between
the min and max value."/><prop caption="min" editor="textbox" value="[@min]" description="the minimum value the progressbar may have. This is
the value that the progressbar has when it's at its start position."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value the progressbar may have. This is
the value that the progressbar has when it's at its end position."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></progress><progressbar><group caption="General"><prop caption="autostart" editor="checkbox" value="[@autostart]" description="whether the progressbar starts automatically." values="true|false"/><prop caption="autohide" editor="checkbox" value="[@autohide]" description="whether the progressbar hides when the progress is at 100%. Setting this to true will hide the progressbar at start when autostart is not set to true." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the position of the progressbar stated between
the min and max value."/><prop caption="min" editor="textbox" value="[@min]" description="the minimum value the progressbar may have. This is
the value that the progressbar has when it's at its start position."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value the progressbar may have. This is
the value that the progressbar has when it's at its end position."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></progressbar><collection><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></collection><docklet><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></docklet><chart><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></chart><table><group caption="General"><prop caption="columns" editor="textbox" value="[@columns]" description="a comma seperated list of column sizes. A column size can be specified in a number (size in pixels) or using a number and a % sign to indicate a percentage. A '*' indicates the column spans the rest space. There can be only one '*' in the column string."/><prop caption="padding" editor="textbox" value="[@padding]" description="the space between each element. Defaults to 2."/><prop caption="edge" editor="textbox" value="[@edge]" description="the space between the container and the elements, space seperated in pixels for each side. Similar to css in the sequence top right bottom left. Defaults to &quot;5 5 5 5&quot;."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></table><tab><group caption="BaseTab"><prop caption="activepagenr" editor="textbox" value="[@activepagenr]" description="the child number of the active page."/><prop caption="activepage" editor="textbox" value="[@activepage]" description="the name of the active page."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="beforeswitch" editor="textbox" value="[@beforeswitch]" type="event" description="Fires before this element switches to another page."/><prop caption="afterswitch" editor="textbox" value="[@afterswitch]" type="event" description="Fires after this element has switched to another page."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></tab><pages><group caption="BaseTab"><prop caption="activepagenr" editor="textbox" value="[@activepagenr]" description="the child number of the active page."/><prop caption="activepage" editor="textbox" value="[@activepage]" description="the name of the active page."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="beforeswitch" editor="textbox" value="[@beforeswitch]" type="event" description="Fires before this element switches to another page."/><prop caption="afterswitch" editor="textbox" value="[@afterswitch]" type="event" description="Fires after this element has switched to another page."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></pages><switch><group caption="BaseTab"><prop caption="activepagenr" editor="textbox" value="[@activepagenr]" description="the child number of the active page."/><prop caption="activepage" editor="textbox" value="[@activepage]" description="the name of the active page."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="beforeswitch" editor="textbox" value="[@beforeswitch]" type="event" description="Fires before this element switches to another page."/><prop caption="afterswitch" editor="textbox" value="[@afterswitch]" type="event" description="Fires after this element has switched to another page."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></switch><label><group caption="General"><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed in the area defined by this
element. Using the value attribute provides an alternative to using
the text using a text node."/><prop caption="for" editor="textbox" value="[@for]" description="the id of the element that receives the focus
when the label is clicked on."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></label><slideshow><group caption="General"><prop caption="title" editor="dropdown" value="[@title]" description="the description of the picture on the slide.
Default is &quot;number&quot;."><item value="number">number</item><item value="text">text</item><item value="number+text">number+text</item></prop><prop caption="delay" editor="textbox" value="[@delay]" description="the delay between slides when the play
button is pressed. Default is 5 seconds."/><prop caption="thumbheight" editor="textbox" value="[@thumbheight]" description="the vertical size of thumbnail bar.
Default is 50px."/><prop caption="defaultthumb" editor="textbox" value="[@defaultthumb]" description="the thumbnail shown when a slide doesn't
have one."/><prop caption="defaultimage" editor="textbox" value="[@defaultimage]" description="the image shown when a slide doesn't have
an image."/><prop caption="defaulttitle" editor="textbox" value="[@defaulttitle]" description="the text shown when a slide doesn't have
a description."/><prop caption="loadmsg" editor="textbox" value="[@loadmsg]" description="this text displayd while the picture is
loading."/><prop caption="scalewidth" editor="checkbox" value="[@scalewidth]" description="whether the width of the thumbnail is
scaled relative to its height." values="true|false"/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></slideshow><title><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></title><thumb><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></thumb><scrollbar><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></scrollbar><load><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></load><insert><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></insert><button><group caption="General"><prop caption="icon" editor="textbox" value="[@icon]" description="the url from which the icon image is loaded."/><prop caption="state" editor="checkbox" value="[@state]" description="whether this boolean is a multi state button." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the initial value of a state button."/><prop caption="color" editor="textbox" value="[@color]" description="the text color of the caption of this element."/><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed on this element indicating the action when the button is pressed."/><prop caption="action" editor="dropdown" value="[@action]" description="one of the default actions this button can perform when pressed."><item value="undo">undo</item><item value="redo">redo</item><item value="remove">remove</item><item value="add">add</item><item value="rename">rename</item><item value="login">login</item><item value="logout">logout</item><item value="submit">submit</item><item value="ok">ok</item><item value="cancel">cancel</item><item value="apply">apply</item><item value="close">close</item></prop><prop caption="target" editor="textbox" value="[@target]" description="id of the element to apply the action to. Defaults to the parent container."/><prop caption="default" editor="textbox" value="[@default]" description="whether this button is the default action for the containing window."/><prop caption="submenu" editor="textbox" value="[@submenu]" description="the name of the contextmenu to display when the button is pressed."/><prop caption="hotkey" editor="textbox" value="[@hotkey]" description="the key combination a user can press
to active the function of this element. Use any combination of
Ctrl, Shift, Alt, F1-F12 and alphanumerical characters. Use a
space, a minus or plus sign as a seperator."/></group><group caption="BaseButton"><prop caption="background" editor="textbox" value="[@background]" description="sets a multistate background. The arguments
are seperated by pipes '|' and are in the order of:
'imagefilename|mapdirection|nrofstates|imagesize'
The mapdirection argument may have the value of 'vertical' or 'horizontal'.
The nrofstates argument specifies the number of states the iconfile contains:
1 - normal
2 - normal, hover
3 - normal, hover, down
4 - normal, hover, down, disabled
The imagesize argument specifies how high or wide each icon is inside the
map, depending of the mapdirection argument.
"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></button><submit><group caption="General"><prop caption="icon" editor="textbox" value="[@icon]" description="the url from which the icon image is loaded."/><prop caption="state" editor="checkbox" value="[@state]" description="whether this boolean is a multi state button." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the initial value of a state button."/><prop caption="color" editor="textbox" value="[@color]" description="the text color of the caption of this element."/><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed on this element indicating the action when the button is pressed."/><prop caption="action" editor="dropdown" value="[@action]" description="one of the default actions this button can perform when pressed."><item value="undo">undo</item><item value="redo">redo</item><item value="remove">remove</item><item value="add">add</item><item value="rename">rename</item><item value="login">login</item><item value="logout">logout</item><item value="submit">submit</item><item value="ok">ok</item><item value="cancel">cancel</item><item value="apply">apply</item><item value="close">close</item></prop><prop caption="target" editor="textbox" value="[@target]" description="id of the element to apply the action to. Defaults to the parent container."/><prop caption="default" editor="textbox" value="[@default]" description="whether this button is the default action for the containing window."/><prop caption="submenu" editor="textbox" value="[@submenu]" description="the name of the contextmenu to display when the button is pressed."/><prop caption="hotkey" editor="textbox" value="[@hotkey]" description="the key combination a user can press
to active the function of this element. Use any combination of
Ctrl, Shift, Alt, F1-F12 and alphanumerical characters. Use a
space, a minus or plus sign as a seperator."/></group><group caption="BaseButton"><prop caption="background" editor="textbox" value="[@background]" description="sets a multistate background. The arguments
are seperated by pipes '|' and are in the order of:
'imagefilename|mapdirection|nrofstates|imagesize'
The mapdirection argument may have the value of 'vertical' or 'horizontal'.
The nrofstates argument specifies the number of states the iconfile contains:
1 - normal
2 - normal, hover
3 - normal, hover, down
4 - normal, hover, down, disabled
The imagesize argument specifies how high or wide each icon is inside the
map, depending of the mapdirection argument.
"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></submit><trigger><group caption="General"><prop caption="icon" editor="textbox" value="[@icon]" description="the url from which the icon image is loaded."/><prop caption="state" editor="checkbox" value="[@state]" description="whether this boolean is a multi state button." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the initial value of a state button."/><prop caption="color" editor="textbox" value="[@color]" description="the text color of the caption of this element."/><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed on this element indicating the action when the button is pressed."/><prop caption="action" editor="dropdown" value="[@action]" description="one of the default actions this button can perform when pressed."><item value="undo">undo</item><item value="redo">redo</item><item value="remove">remove</item><item value="add">add</item><item value="rename">rename</item><item value="login">login</item><item value="logout">logout</item><item value="submit">submit</item><item value="ok">ok</item><item value="cancel">cancel</item><item value="apply">apply</item><item value="close">close</item></prop><prop caption="target" editor="textbox" value="[@target]" description="id of the element to apply the action to. Defaults to the parent container."/><prop caption="default" editor="textbox" value="[@default]" description="whether this button is the default action for the containing window."/><prop caption="submenu" editor="textbox" value="[@submenu]" description="the name of the contextmenu to display when the button is pressed."/><prop caption="hotkey" editor="textbox" value="[@hotkey]" description="the key combination a user can press
to active the function of this element. Use any combination of
Ctrl, Shift, Alt, F1-F12 and alphanumerical characters. Use a
space, a minus or plus sign as a seperator."/></group><group caption="BaseButton"><prop caption="background" editor="textbox" value="[@background]" description="sets a multistate background. The arguments
are seperated by pipes '|' and are in the order of:
'imagefilename|mapdirection|nrofstates|imagesize'
The mapdirection argument may have the value of 'vertical' or 'horizontal'.
The nrofstates argument specifies the number of states the iconfile contains:
1 - normal
2 - normal, hover
3 - normal, hover, down
4 - normal, hover, down, disabled
The imagesize argument specifies how high or wide each icon is inside the
map, depending of the mapdirection argument.
"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></trigger><reset><group caption="General"><prop caption="icon" editor="textbox" value="[@icon]" description="the url from which the icon image is loaded."/><prop caption="state" editor="checkbox" value="[@state]" description="whether this boolean is a multi state button." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the initial value of a state button."/><prop caption="color" editor="textbox" value="[@color]" description="the text color of the caption of this element."/><prop caption="caption" editor="textbox" value="[@caption]" description="the text displayed on this element indicating the action when the button is pressed."/><prop caption="action" editor="dropdown" value="[@action]" description="one of the default actions this button can perform when pressed."><item value="undo">undo</item><item value="redo">redo</item><item value="remove">remove</item><item value="add">add</item><item value="rename">rename</item><item value="login">login</item><item value="logout">logout</item><item value="submit">submit</item><item value="ok">ok</item><item value="cancel">cancel</item><item value="apply">apply</item><item value="close">close</item></prop><prop caption="target" editor="textbox" value="[@target]" description="id of the element to apply the action to. Defaults to the parent container."/><prop caption="default" editor="textbox" value="[@default]" description="whether this button is the default action for the containing window."/><prop caption="submenu" editor="textbox" value="[@submenu]" description="the name of the contextmenu to display when the button is pressed."/><prop caption="hotkey" editor="textbox" value="[@hotkey]" description="the key combination a user can press
to active the function of this element. Use any combination of
Ctrl, Shift, Alt, F1-F12 and alphanumerical characters. Use a
space, a minus or plus sign as a seperator."/></group><group caption="BaseButton"><prop caption="background" editor="textbox" value="[@background]" description="sets a multistate background. The arguments
are seperated by pipes '|' and are in the order of:
'imagefilename|mapdirection|nrofstates|imagesize'
The mapdirection argument may have the value of 'vertical' or 'horizontal'.
The nrofstates argument specifies the number of states the iconfile contains:
1 - normal
2 - normal, hover
3 - normal, hover, down
4 - normal, hover, down, disabled
The imagesize argument specifies how high or wide each icon is inside the
map, depending of the mapdirection argument.
"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></reset><statusbar><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></statusbar><smartbinding><group caption="General"><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element that contains
the {@link term.binding binding rules} for all elements connected to
this smartbinding element"/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element that provides
the {@link term.action action rules} for all elements connected to
this smartbinding element"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the id of the dragdrop element that provides
the drag and drop rules for all elements connected to this smartbinding
element"/><prop caption="model" editor="textbox" value="[@model]" description="the id of the model element that provides
the data for all elements connected to this smartbinding element."/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></smartbinding><markupedit><group caption="MultiSelect"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="MultiselectBinding"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></markupedit><each><group caption="General"><prop caption="match" editor="textbox" value="[@match]" description="an xpath statement which selects the nodes
which will be rendered."/><prop caption="sort" editor="textbox" value="[@sort]" description="an xpath statement which selects the value
which is subject to the sorting algorithm."/><prop caption="data-type" editor="dropdown" value="[@data-type]" description="the way sorting is executed. See
{@link baseclass.multiselectbinding.binding.each.attribute.sort-method}
on how to specify a custom sort method."><item value="string">string</item><item value="number">number</item><item value="date">date</item></prop><prop caption="date-format" editor="dropdown" value="[@date-format]" description="the format of the date on which is sorted."><item value="YYYY">YYYY</item><item value="YY">YY</item><item value="DD">DD</item><item value="MM">MM</item><item value="hh">hh</item><item value="mm">mm</item><item value="ss">ss</item></prop><prop caption="sort-method" editor="textbox" value="[@sort-method]" description="the name of a javascript function to executed
to determine the value to sort on."/><prop caption="order" editor="dropdown" value="[@order]" description="the order of the sorted list."><item value="ascending">ascending</item><item value="descending">descending</item></prop><prop caption="case-order" editor="dropdown" value="[@case-order]" description="whether upper case characters have preference
above lower case characters."><item value="upper-first">upper-first</item><item value="lower-first">lower-first</item></prop></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></each><webdav><group caption="General"><prop caption="show-hidden" editor="textbox" value="[@show-hidden]" description="Flag that specifies if hidden files
should be passed"/></group><group caption="Teleport"><prop caption="url" editor="textbox" value="[@url]" description="the location of the server that is
recipient of the rpc messages."/><prop caption="route-server" editor="textbox" value="[@route-server]" description="String specifying the url to the route script."/><prop caption="autoroute" editor="checkbox" value="[@autoroute]" description="whether the call should be routed
through a proxy when a permission
error occurs due to the same domein policy." values="true|false"/><prop caption="timeout" editor="textbox" value="[@timeout]" description="the number of milliseconds after
which the call is considered timed out.
"/></group><events caption="Events"><prop caption="authfailure" editor="textbox" value="[@authfailure]" type="event" description="Fires when the authentication process failed or halted."/><prop caption="connectionerror" editor="textbox" value="[@connectionerror]" type="event" description="Fires when the connection with the WebDAV server dropped."/><prop caption="onfilecontents" editor="textbox" value="[@onfilecontents]" type="event" description="Fires when a {@link teleport.webdav.method.read read} request has
completed successfully and returns the content-body of the requested file"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error occurs."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/></events></webdav><editor><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></editor><text><group caption="General"><prop caption="scrolldown" editor="checkbox" value="[@scrolldown]" description="whether this elements viewport is always
scrolled down. This is especially useful
when this element is used to displayed
streaming content such as a chat conversation." values="true|false"/><prop caption="secure" editor="checkbox" value="[@secure]" description="whether the content loaded in this element
should be filtered in order for it to not
be able to execute javascript. This is
especially useful when the content does
not come from a trusted source, like a
web service or xmpp feed." values="true|false"/><prop caption="behaviour" editor="textbox" value="[@behaviour]" description="specifying how this elements handles new values
Possible values
normal   new values replace the old value.
addonly  new values are added to the current value."/><prop caption="value" editor="textbox" value="[@value]" description="the contents of this element. This can be text or html or xhtml."/></group><group caption="Cache"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></text><propedit><group caption="General"><prop caption="iframe" editor="checkbox" value="[@iframe]" description="whether this element is rendered inside an iframe. This is only supported for IE. Default is false for datagrid and true for spreadsheet and propedit." values="true|false"/><prop caption="properties" editor="textbox" value="[@properties]" description="the {@link terms.datainstruction data instruction}
to fetch a template definition of the layout for this component. A template
consists of descriptions of columns (or rows for propedit) for which
several settings are determined such as validation rules, edit component
and selection rules."/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></propedit><slider><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the slider updates it's value realtime,
or just when the user stops dragging." values="true|false"/><prop caption="balloon" editor="checkbox" value="[@balloon]" description="whether to show the balloon with extra
information on the position of the slider.
Default is true when the skin supports it." values="true|false"/><prop caption="step" editor="textbox" value="[@step]" description="specifying the step size of a discreet slider."/><prop caption="markers" editor="checkbox" value="[@markers]" description="whether to display a marker at each discrete step." values="true|false"/><prop caption="mask" editor="textbox" value="[@mask]" description="a pipe '|' seperated list of strings that are
used as the caption of the slider when their connected value is picked.
Or set mask to # to display the numerical value of the position or use %
to display the position as percentage of the total."/><prop caption="progress" editor="textbox" value="[@progress]" description="a value between 0 and 1 which is visualized
inside the slider. This can be used to show a progress indicator for
the download of movies or other media."/><prop caption="min" editor="textbox" value="[@min]" description="the minimal value the slider can have. This is
the value that the slider has when the grabber is at it's begin position."/><prop caption="max" editor="textbox" value="[@max]" description="the maximal value the slider can have. This is
the value that the slider has when the grabber is at it's end position."/><prop caption="slide" editor="dropdown" value="[@slide]" description="the way the grabber can be handled"><item value="normal">normal</item><item value="discrete">discrete</item><item value="snap">snap</item></prop><prop caption="value" editor="textbox" value="[@value]" description="the value of slider which is represented in
the position of the grabber using the following"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></slider><range><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the slider updates it's value realtime,
or just when the user stops dragging." values="true|false"/><prop caption="balloon" editor="checkbox" value="[@balloon]" description="whether to show the balloon with extra
information on the position of the slider.
Default is true when the skin supports it." values="true|false"/><prop caption="step" editor="textbox" value="[@step]" description="specifying the step size of a discreet slider."/><prop caption="markers" editor="checkbox" value="[@markers]" description="whether to display a marker at each discrete step." values="true|false"/><prop caption="mask" editor="textbox" value="[@mask]" description="a pipe '|' seperated list of strings that are
used as the caption of the slider when their connected value is picked.
Or set mask to # to display the numerical value of the position or use %
to display the position as percentage of the total."/><prop caption="progress" editor="textbox" value="[@progress]" description="a value between 0 and 1 which is visualized
inside the slider. This can be used to show a progress indicator for
the download of movies or other media."/><prop caption="min" editor="textbox" value="[@min]" description="the minimal value the slider can have. This is
the value that the slider has when the grabber is at it's begin position."/><prop caption="max" editor="textbox" value="[@max]" description="the maximal value the slider can have. This is
the value that the slider has when the grabber is at it's end position."/><prop caption="slide" editor="dropdown" value="[@slide]" description="the way the grabber can be handled"><item value="normal">normal</item><item value="discrete">discrete</item><item value="snap">snap</item></prop><prop caption="value" editor="textbox" value="[@value]" description="the value of slider which is represented in
the position of the grabber using the following"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></range><codeeditor><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the value of the bound data is
updated as the user types it, or only when this element looses focus or
the user presses enter." values="true|false"/><prop caption="value" editor="textbox" value="[@value]" description="the text of this element"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></codeeditor><state><group caption="General"><prop caption="active" editor="checkbox" value="[@active]" description="whether this state is the active state" values="true|false"/></group><events caption="Events"><prop caption="change" editor="textbox" value="[@change]" type="event" description="Fires when the active property of this element changes."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></state><checkbox><group caption="General"><prop caption="value" editor="textbox" value="[@value]" description="the value of this element."/><prop caption="checked" editor="checkbox" value="[@checked]" description="whether the element is in the checked state." values="true|false"/><prop caption="label" editor="textbox" value="[@label]" description="the caption of the label explaining what
the meaning of the checked state of this element is."/><prop caption="values" editor="textbox" value="[@values]" description="a pipe seperated list of two values which
correspond to the two states of the checkbox. The first for the checked
state, the second for the unchecked state. Defaults to &quot;true|false&quot;."/></group><group caption="BaseButton"><prop caption="background" editor="textbox" value="[@background]" description="sets a multistate background. The arguments
are seperated by pipes '|' and are in the order of:
'imagefilename|mapdirection|nrofstates|imagesize'
The mapdirection argument may have the value of 'vertical' or 'horizontal'.
The nrofstates argument specifies the number of states the iconfile contains:
1 - normal
2 - normal, hover
3 - normal, hover, down
4 - normal, hover, down, disabled
The imagesize argument specifies how high or wide each icon is inside the
map, depending of the mapdirection argument.
"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></checkbox><application><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></application><img><group caption="General"><prop caption="value" editor="textbox" value="[@value]" description="the url location of the image displayed."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when a user presses a mouse button while over this element."/><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></img><preview><group caption="General"><prop caption="value" editor="textbox" value="[@value]" description="the url location of the image displayed."/></group><group caption="DataAction"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><group caption="DataBinding"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></preview><name><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></name><loader><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></loader><body><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></body><config><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></config><state-group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></state-group><viewport><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></viewport><appsettings><group caption="General"><prop caption="debug" editor="checkbox" value="[@debug]" description="whether the debug screen is shown at startup." values="true|false"/><prop caption="name" editor="textbox" value="[@name]" description="the name of the application, used by many different services to uniquely identify the application."/><prop caption="disable-right-click" editor="checkbox" value="[@disable-right-click]" description="whether a user can get the browsers contextmenu when the right mouse button is clicked." values="true|false"/><prop caption="allow-select" editor="checkbox" value="[@allow-select]" description="whether general text in the application can be selected." values="true|false"/><prop caption="allow-blur" editor="checkbox" value="[@allow-blur]" description="whether it's possible to blur an element while not giving the focus to another element. Defaults to true." values="true|false"/><prop caption="auto-disable-actions" editor="checkbox" value="[@auto-disable-actions]" description="whether smartbinding actions are by default disabled." values="true|false"/><prop caption="auto-disable" editor="checkbox" value="[@auto-disable]" description="whether elements that don't have content loaded are automatically disabled." values="true|false"/><prop caption="disable-f5" editor="checkbox" value="[@disable-f5]" description="whether the F5 key for refreshing is disabled." values="true|false"/><prop caption="auto-hide-loading" editor="checkbox" value="[@auto-hide-loading]" description="whether the load screen defined by the loader element is automatically hidden. Setting this to false enables you to control when the loading screen is hidden. Use the following code to do so:
&lt;code&gt;
apf.document.getElementsByTagName(&quot;a:loader&quot;)[0].hide()
//or
loaderId.hide()
&lt;/code&gt;" values="true|false"/><prop caption="disable-space" editor="checkbox" value="[@disable-space]" description="whether the space button default behaviour of scrolling the page is disabled." values="true|false"/><prop caption="disable-backspace" editor="checkbox" value="[@disable-backspace]" description="whether the backspace button default behaviour of going to the previous history state is disabled." values="true|false"/><prop caption="default-page" editor="textbox" value="[@default-page]" description="the name of the default page if none is specified using the #. Defaults to &quot;home&quot;. See {object.history}."/><prop caption="undokeys" editor="checkbox" value="[@undokeys]" description="whether the undo and redo keys (in windows they are ctrl-Z and ctrl-Y) are enabled." values="true|false"/><prop caption="outline" editor="textbox" value="[@outline]" description="whether an outline of an element is shown while dragging or resizing."/><prop caption="drag-outline" editor="textbox" value="[@drag-outline]" description="whether an outline of an element is shown while dragging."/><prop caption="resize-outline" editor="textbox" value="[@resize-outline]" description="whether an outline of an element is shown while resizing."/><prop caption="layout" editor="textbox" value="[@layout]" description="the {@link term.datainstruction data instruction} to retrieve the layout xml definition."/><prop caption="baseurl" editor="textbox" value="[@baseurl]" description="the basepath for any relative url used throughout your application. This included teleport definitions and {@link term.datainstruction data instruction}."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the global value for the loading message of elements during a loading state."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the global value for the offline message of elements not able to display content while offline."/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the global value for the empty message of elements containing no contents."/><prop caption="model" editor="textbox" value="[@model]" description="the default model for this application."/><prop caption="realtime" editor="textbox" value="[@realtime]" description="the global value whether bound values are realtime updated. When set to false elements do not update until they lose focus."/><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skin set used by the application."/><prop caption="storage" editor="textbox" value="[@storage]" description="the {@link core.storage storage provider} to be used for key/value storage."/><prop caption="offline" editor="textbox" value="[@offline]" description="the {@link core.storage storage provider} to be used for offline support."/><prop caption="login" editor="textbox" value="[@login]" description="the {@link term.datainstruction data instruction} which logs a user into the application."/><prop caption="logout" editor="textbox" value="[@logout]" description="the {@link term.datainstruction data instruction} which logs a user out of the application."/><prop caption="iepngfix" editor="textbox" value="[@iepngfix]" description="whether the fix for PNG images with transparency should be applied. Default is false."/><prop caption="iepngfix-elements" editor="textbox" value="[@iepngfix-elements]" description="a comma-seperated list of CSS identifiers (classes) to which the transparent-PNG fix will be applied."/><prop caption="iphone-fullscreen" editor="checkbox" value="[@iphone-fullscreen]" description="whether the application should cover the entire screen of the iPhone. Default is true." values="true|false"/><prop caption="iphone-statusbar" editor="textbox" value="[@iphone-statusbar]" description="the style of the statusbar of the iPhone webbrowser. Posssible values: 'default', black-translucent' or 'black'."/><prop caption="iphone-icon" editor="textbox" value="[@iphone-icon]" description="path pointing to the icon that should be used when this application is put on the iPhone Dashboard."/><prop caption="iphone-icon-is-glossy" editor="checkbox" value="[@iphone-icon-is-glossy]" description="whether the icon specified with 'iphone-icon' already is glossy or if the iPhone OS should apply that effect. Default is false." values="true|false"/><prop caption="iphone-fixed-viewport" editor="checkbox" value="[@iphone-fixed-viewport]" description="whether the viewport of the application is fixed and whether the zoom should be enabled. Default is true." values="true|false"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></appsettings><rpc><group caption="General"><prop caption="protocol" editor="textbox" value="[@protocol]" description="the name of the plugin that is used
to provide the messages."/><prop caption="multicall" editor="checkbox" value="[@multicall]" description="whether the call is stacked until
purge() is called." values="true|false"/><prop caption="route-server" editor="textbox" value="[@route-server]" description="the location of the proxy script that
allows for cross domain communication."/><prop caption="http-method" editor="dropdown" value="[@http-method]" description="the http method used to send the data.
This attribute is only used by the cgi protocol."><item value="post">post</item><item value="get">get</item><item value="delete">delete</item><item value="head">head</item><item value="put">put</item></prop><prop caption="method-name" editor="textbox" value="[@method-name]" description="the variable name used to sent the
name of the method called to the
server. This attribute is only used
by the cgi protocol."/><prop caption="soap-xmlns" editor="textbox" value="[@soap-xmlns]" description="the url that uniquely identifies the
xml namespace for the message. This
attribute is only used by the soap
protocol."/><prop caption="soap-prefix" editor="textbox" value="[@soap-prefix]" description="the prefix that is paired with the
message xml namespace. This attribute
is only used by the soap protocol."/></group><group caption="Teleport"><prop caption="url" editor="textbox" value="[@url]" description="the location of the server that is
recipient of the rpc messages."/><prop caption="route-server" editor="textbox" value="[@route-server]" description="String specifying the url to the route script."/><prop caption="autoroute" editor="checkbox" value="[@autoroute]" description="whether the call should be routed
through a proxy when a permission
error occurs due to the same domein policy." values="true|false"/><prop caption="timeout" editor="textbox" value="[@timeout]" description="the number of milliseconds after
which the call is considered timed out.
"/></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></rpc><fieldset><group caption="General"><prop caption="caption" editor="textbox" value="[@caption]" description="the text of the caption."/><prop caption="icon" editor="textbox" value="[@icon]" description="the location of the image."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></fieldset><frame><group caption="General"><prop caption="caption" editor="textbox" value="[@caption]" description="the text of the caption."/><prop caption="icon" editor="textbox" value="[@icon]" description="the location of the image."/></group><group caption="Presentation"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group><group caption="GuiElement"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><group caption="Alignment"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group><group caption="DelayedRender"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><group caption="DragDrop"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><group caption="Interactive"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><group caption="Transaction"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><group caption="Validation"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></frame><axis><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></axis><method><group caption="General"><prop caption="name" editor="textbox" value="[@name]" description="the name of the method. This name will
be available on the rpc object as a
javascript method."/><prop caption="callback" editor="textbox" value="[@callback]" description="the name of the method that handles
the return of the call."/><prop caption="async" editor="checkbox" value="[@async]" description="whether the call is executed in the
backround. Default is true. When set
to false the application hangs while
this call is executed." values="true|false"/><prop caption="caching" editor="checkbox" value="[@caching]" description="whether the call is cached. Default
is false. When set to true any call
with the same data will return immediately
with the cached result." values="true|false"/><prop caption="ignore-offline" editor="checkbox" value="[@ignore-offline]" description="whether the method should not be stored
for later execution when offline." values="true|false"/><prop caption="method-name" editor="checkbox" value="[@method-name]" description="the name sent to the server." values="true|false"/><prop caption="type" editor="dropdown" value="[@type]" description="the type of the returned data"><item value="xml">xml</item></prop></group><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></method><autocomplete><group caption="General"><prop caption="nodeset" editor="textbox" value="[@nodeset]" description="how to retrieve the nodeset. This is a combination of model name and an xpath statement seperated by a colon (i.e. mdlUsers:users)"/><prop caption="method" editor="textbox" value="[@method]" description="the name of a function that returns a nodeset."/><prop caption="value" editor="textbox" value="[@value]" description="an xpath which selects the value of each node in the nodeset."/><prop caption="count" editor="textbox" value="[@count]" description="the number of visible items in the list at the same time."/><prop caption="sort" editor="textbox" value="[@sort]" description="an xpath on which the list is ordered."/></group></autocomplete><Class><events caption="Events"><prop caption="propertychange" editor="textbox" value="[@propertychange]" type="event" description="Fires when a property changes."/></events></Class><AmlNode><events caption="Events"><prop caption="DOMNodeInserted" editor="textbox" value="[@domnodeinserted]" type="event"/><prop caption="DOMNodeInsertedIntoDocument" editor="textbox" value="[@domnodeinsertedintodocument]" type="event"/><prop caption="DOMNodeRemoved" editor="textbox" value="[@domnoderemoved]" type="event"/><prop caption="DOMNodeRemovedFromDocument" editor="textbox" value="[@domnoderemovedfromdocument]" type="event"/></events></AmlNode><AmlElement/><AmlCharacterData/><XsdElement/><XsdSchema/><Anchoring/><Alignment><group caption="General"><prop caption="layout"><prop caption="align" editor="textbox" value="[@align]" description="the edge of the parent to which this
element aligns. Possible values are
a combination of: &quot;left&quot;, &quot;middle&quot;,
&quot;right&quot;, &quot;top&quot;, &quot;bottom&quot; and &quot;slider&quot;
and optionally a size."><prop caption="dock" editor="checkbox" value="[@dock]" default="false" description="whether this element can function as a dockable section of the layout." values="true|false"/><prop caption="dockable" editor="checkbox" value="[@dockable]" default="false" description="whether this element can be dragged to dock somewhere else" values="true|false"/><prop caption="lean" editor="dropdown" value="[@lean]" default="left" description="the position of element when it is ambiguous."><item value="left">left</item><item value="right">right</item><item value="top">top</item><item value="bottom">bottom</item></prop><prop caption="edge" editor="slider" value="[@edge]" default="4" description="the size of the edge of the space between
this and the neighbouring element to the
right or top. If the value of this attribute
is smaller than that of the splitter,
the edge will be the size of the splitter."/><prop caption="weight" editor="slider" value="[@weight]" default="1" description="the factor (between 0 and 1) this element
takes when no width is specified. The factor
is calculated by doing (weight/totalweight)
* space available in parent. Based on
the parent being a vbox or hbox this
attribute calculates either the element's
width or height."/><prop caption="splitter" editor="slider" value="[@splitter]" default="0" description="the size of splitter that is placed between
this and the neighbouring element to the
right or top. When not specified, the
splitter is not displayed."/></prop><prop caption="minwidth" editor="slider" value="[@minwidth]" default="0" description="the minimum horizontal size of this element."/><prop caption="minheight" editor="slider" value="[@minheight]" default="0" description="the minimum vertical size of this element."/></prop></group></Alignment><ContentEditable/><GuiElement><group caption="General"><prop caption="span" editor="textbox" value="[@span]" description="the number of columns this element spans. Only used inside a table element."/><prop caption="margin" editor="textbox" value="[@margin]"/><prop caption="left" editor="textbox" value="[@left]" description="the left position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="top" editor="textbox" value="[@top]" description="the top position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="right" editor="textbox" value="[@right]" description="the right position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="bottom" editor="textbox" value="[@bottom]" description="the bottom position of this element. Depending
on the choosen layout method the unit can be pixels, a percentage or an
expression."/><prop caption="width" editor="textbox" value="[@width]" description="the different between the left edge and the
right edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="height" editor="textbox" value="[@height]" description="the different between the top edge and the
bottom edge of this element. Depending on the choosen layout method the
unit can be pixels, a percentage or an expression."/><prop caption="focussable" editor="checkbox" value="[@focussable]" description="whether this element can receive the focus.
The focussed element receives keyboard event.s" values="true|false"/><prop caption="zindex" editor="textbox" value="[@zindex]" description="the z ordered layer in which this element is
drawn."/><prop caption="visible" editor="checkbox" value="[@visible]" description="whether this element is shown." values="true|false"/><prop caption="disabled" editor="checkbox" value="[@disabled]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="enables" editor="checkbox" value="[@enables]" description="whether this element's functions are active.
For elements that can contain other apf.NODE_VISIBLE elements this
attribute applies to all it's children." values="true|false"/><prop caption="disable-keyboard" editor="checkbox" value="[@disable-keyboard]" description="whether this element receives
keyboard input. This allows you to disable keyboard independently from
focus handling." values="true|false"/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the text displayed when a user hovers with
the mouse over the element."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" description="the name of the menu element that will
be shown when the user right clicks or uses the context menu keyboard
shortcut."/><prop caption="actiontracker" editor="textbox" value="[@actiontracker]" description="the name of the actiontracker that
is used for this element and it's children. If the actiontracker doesn't
exist yet it is created."/><prop caption="aml" editor="textbox" value="[@aml]" description="the {@link term.datainstruction data instruction}
that loads new aml as children of this element."/><prop caption="sets" editor="textbox" value="[@sets]" description="this aml element to be editable
that loads new aml as children of this element."/><prop caption="transaction" editor="checkbox" value="[@transaction]" description="Whether this element provides transaction
support for all it's children." values="true|false"/></group><events caption="Events"><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the element changes width or height."/><prop caption="contextmenu" editor="textbox" value="[@contextmenu]" type="event" description="Fires when the user requests a context menu. Either
using the keyboard or mouse."/><prop caption="focus" editor="textbox" value="[@focus]" type="event" description="Fires when this element receives focus."/><prop caption="blur" editor="textbox" value="[@blur]" type="event" description="Fires when this element loses focus."/><prop caption="keydown" editor="textbox" value="[@keydown]" type="event" description="Fires when this element has focus and the user presses a key on the keyboard."/></events></GuiElement><Presentation><group caption="General"><prop caption="skinset" editor="textbox" value="[@skinset]" description="the skinset for
this element. If none is specified the skinset attribute
of the appsettings is used. When not defined the default skinset
is used."/><prop caption="skin" editor="textbox" value="[@skin]" description="the name of the skin in the skinset that defines
how this element is rendered. When a skin is changed the full state of the
element is kept including it's selection, all the
aml attributes, loaded data, focus and disabled state."/><prop caption="style" editor="textbox" value="[@style]" description="the css style applied to the this element. This can be a string containing one or more css rules."/><prop caption="border" editor="textbox" value="[@border]" description="turns borders on and off. Set sizes in the seq top, right, bottom, left."/><prop caption="class" editor="textbox" value="[@class]" description="the name of the css style class applied to the this element."/></group></Presentation><Validation><group caption="General"><prop caption="required" editor="checkbox" value="[@required]" description="whether a valid value for this element is required." values="true|false"/><prop caption="pattern" editor="textbox" value="[@pattern]" description="the pattern tested against the value of this element to determine it's validity."/><prop caption="datatype" editor="dropdown" value="[@datatype]" description="the datatype that the value of this element should adhere to. This can be any
of a set of predefined types, or a simple type created by an XML Schema definition."><item value="xsd:dateTime">xsd:dateTime</item><item value="xsd:time">xsd:time</item><item value="xsd:date">xsd:date</item><item value="xsd:gYearMonth">xsd:gYearMonth</item><item value="xsd:gYear">xsd:gYear</item><item value="xsd:gMonthDay">xsd:gMonthDay</item><item value="xsd:gDay">xsd:gDay</item><item value="xsd:gMonth">xsd:gMonth</item><item value="xsd:string">xsd:string</item><item value="xsd:boolean">xsd:boolean</item><item value="xsd:base64Binary">xsd:base64Binary</item><item value="xsd:hexBinary">xsd:hexBinary</item><item value="xsd:float">xsd:float</item><item value="xsd:decimal">xsd:decimal</item><item value="xsd:double">xsd:double</item><item value="xsd:anyURI">xsd:anyURI</item><item value="xsd:integer">xsd:integer</item><item value="xsd:nonPositiveInteger">xsd:nonPositiveInteger</item><item value="xsd:negativeInteger">xsd:negativeInteger</item><item value="xsd:long">xsd:long</item><item value="xsd:int">xsd:int</item><item value="xsd:short">xsd:short</item><item value="xsd:byte">xsd:byte</item><item value="xsd:nonNegativeInteger">xsd:nonNegativeInteger</item><item value="xsd:unsignedLong">xsd:unsignedLong</item><item value="xsd:unsignedInt">xsd:unsignedInt</item><item value="xsd:unsignedShort">xsd:unsignedShort</item><item value="xsd:unsignedByte">xsd:unsignedByte</item><item value="xsd:positiveInteger">xsd:positiveInteger</item><item value="apf:url">apf:url</item><item value="apf:website">apf:website</item><item value="apf:email">apf:email</item><item value="apf:creditcard">apf:creditcard</item><item value="apf:expdate">apf:expdate</item><item value="apf:wechars">apf:wechars</item><item value="apf:phonenumber">apf:phonenumber</item><item value="apf:faxnumber">apf:faxnumber</item><item value="apf:mobile">apf:mobile</item></prop><prop caption="min" editor="textbox" value="[@min]" description="the minimal value for which the value of this element is valid."/><prop caption="max" editor="textbox" value="[@max]" description="the maximum value for which the value of this element is valid."/><prop caption="minlength" editor="textbox" value="[@minlength]" description="the minimal length allowed for the value of this element."/><prop caption="maxlength" editor="textbox" value="[@maxlength]" description="the maximum length allowed for the value of this element."/><prop caption="notnull" editor="checkbox" value="[@notnull]" description="whether the value is filled. Same as {@link baseclass.validation.attribute.required} but this rule is checked realtime when the element looses the focus, instead of at specific request (for instance when leaving a form page)." values="true|false"/><prop caption="checkequal" editor="textbox" value="[@checkequal]" description="the id of the element to check if it has the same value as this element."/><prop caption="invalidmsg" editor="textbox" value="[@invalidmsg]" description="the message displayed when this element has an invalid value. Use a ; character to seperate the title from the message."/><prop caption="validgroup" editor="textbox" value="[@validgroup]" description="the identifier for a group of items to be validated at the same time. This identifier can be new. It is inherited from a AML node upwards."/><prop caption="validtest" editor="textbox" value="[@validtest]" description="the instruction on how to test for success. This attribute is generally used to check the value on the server."/></group><events caption="Events"><prop caption="invalid" editor="textbox" value="[@invalid]" type="event" description="Fires when this component goes into an invalid state."/></events></Validation><DataBinding><group caption="General"><prop caption="render-root" editor="checkbox" value="[@render-root]" description="whether the xml element loaded into this
element is rendered as well. Default is false." values="true|false"/><prop caption="empty-message" editor="textbox" value="[@empty-message]" description="the message displayed by this element
when it contains no data. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;No items&quot;."/><prop caption="loading-message" editor="textbox" value="[@loading-message]" description="the message displayed by this
element when it's loading. This property is inherited from parent nodes.
When none is found it is looked for on the appsettings element. Otherwise
it defaults to the string &quot;Loading...&quot;."/><prop caption="offline-message" editor="textbox" value="[@offline-message]" description="the message displayed by this
element when it can't load data because the application is offline.
This property is inherited from parent nodes. When none is found it is
looked for on the appsettings element. Otherwise it defaults to the
string &quot;You are currently offline...&quot;."/><prop caption="smartbinding" editor="textbox" value="[@smartbinding]" description="the name of the SmartBinding for this
element. A smartbinding is a collection of rules which define how data
is transformed into representation, how actions on the representation are
propagated to the data and it's original source, how drag&amp;drop actions
change the data and where the data is loaded from. Each of these are
optionally defined in the smartbinding set and can exist independently
of the smartbinding object."/><prop caption="actions" editor="textbox" value="[@actions]" description="the id of the actions element which
provides the action rules for this element. Action rules are used to
send changes on the bound data to a server."/><prop caption="bindings" editor="textbox" value="[@bindings]" description="the id of the bindings element which
provides the binding rules for this element."/><prop caption="model" editor="textbox" value="[@model]" description="the name of the model to load data from or a
datainstruction to load data."/><prop caption="viewport" editor="dropdown" value="[@viewport]" description="the way this element renders its data."><item value="virtual">virtual</item><item value="normal">normal</item></prop></group><events caption="Events"><prop caption="error" editor="textbox" value="[@error]" type="event" description="Fires when a communication error has occured while
making a request for this element."/><prop caption="beforeretrieve" editor="textbox" value="[@beforeretrieve]" type="event" description="Fires before a request is made to retrieve data."/><prop caption="afterretrieve" editor="textbox" value="[@afterretrieve]" type="event" description="Fires when the request to retrieve data returns both
on success and failure."/><prop caption="receive" editor="textbox" value="[@receive]" type="event" description="Fires when data is successfully retrieved"/><prop caption="beforeload" editor="textbox" value="[@beforeload]" type="event" description="Fires before loading data in this element."/><prop caption="afterload" editor="textbox" value="[@afterload]" type="event" description="Fires after loading data in this element."/><prop caption="beforeinsert" editor="textbox" value="[@beforeinsert]" type="event" description="Fires before data is inserted."/><prop caption="afterinsert" editor="textbox" value="[@afterinsert]" type="event" description="Fires after data is inserted."/></events></DataBinding><MultiselectBinding><group caption="General"><prop caption="each" editor="textbox" value="[@each]" description="the xpath statement that determines which
{@link term.datanode data nodes} are rendered by this element (also known
as {@link term.eachnode each nodes}. See
{@link baseclass.multiselectbinding.binding.each} for more information."/><prop caption="caption" editor="textbox" value="[@caption]" description="the xpath statement that determines from
which xml node the caption is retrieved."/><prop caption="valuerule" editor="textbox" value="[@valuerule]" description="the xpath statement that determines from
which xml node the value is retrieved."/><prop caption="icon" editor="textbox" value="[@icon]" description="the xpath statement that determines from
which xml node the icon url is retrieved."/><prop caption="tooltip" editor="textbox" value="[@tooltip]" description="the xpath statement that determines from
which xml node the tooltip text is retrieved."/><prop caption="sort" editor="textbox" value="[@sort]" description="the xpath statement that selects the sortable value."/><prop caption="select" editor="textbox" value="[@select]" description="the xpath statement that determines whether
this node is selectable."/></group><events caption="Events"><prop caption="xmlupdate" editor="textbox" value="[@xmlupdate]" type="event" description="Fires when xml of this element is updated."/></events></MultiselectBinding><StandardBinding/><MultiSelect><group caption="General"><prop caption="multiselect" editor="checkbox" value="[@multiselect]" description="whether the user may select multiple items. Default is true, false for dropdown." values="true|false"/><prop caption="autoselect" editor="checkbox" value="[@autoselect]" description="whether a selection is made after data is loaded. Default is true, false for dropdown. When the string 'all' is set, all {@link term.datanode data nodes} are selected." values="true|false"/><prop caption="selectable" editor="checkbox" value="[@selectable]" description="whether the {@link term.datanode data nodes} of this element can be selected. Default is true." values="true|false"/><prop caption="ctrlselect" editor="checkbox" value="[@ctrlselect]" description="whether when a selection is made as if the user is holding the Ctrl key. When set to true each mouse selection will add to the current selection. selecting an already selected element will deselect it." values="true|false"/><prop caption="allowdeselect" editor="checkbox" value="[@allowdeselect]" description="whether the user can remove the selection of this element. When set to true it is possible for this element to have no selected {@link term.datanode data node}." values="true|false"/><prop caption="reselectable" editor="checkbox" value="[@reselectable]" description="whether selected nodes can be selected again and the selection events are called again. Default is false. When set to false a selected {@link term.datanode data node} cannot be selected again." values="true|false"/><prop caption="default" editor="textbox" value="[@default]" description="the value that this component has when no selection is made."/><prop caption="eachvalue" editor="textbox" value="[@eachvalue]" description="the {@link term.expression expression} that determines the value for each {@link term.datanode data nodes} in the dataset of the element."/><prop caption="value" editor="textbox" value="[@value]" description="the value of the element that is selected."/><prop caption="selection" editor="textbox" value="[@selection]" description="the {@link term.expression expression} that determines the selection for this element. A reference to an xml nodelist can be passed as well."/><prop caption="selected" editor="textbox" value="[@selected]" description="the {@link term.expression expression} that determines the selected node for this element. A reference to an xml element can be passed as well."/></group><events caption="Events"><prop caption="beforeselect" editor="textbox" value="[@beforeselect]" type="event" description="Fires before a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="afterselect" editor="textbox" value="[@afterselect]" type="event" description="Fires after a {@link baseclass.multiselect.method.select selection} is made"/><prop caption="beforechoose" editor="textbox" value="[@beforechoose]" type="event" description="Fires before a choice is made."/><prop caption="afterchoose" editor="textbox" value="[@afterchoose]" type="event" description="Fires after a choice is made."/><prop caption="indicate" editor="textbox" value="[@indicate]" type="event" description="Fires when an item becomes the indicator."/></events></MultiSelect><LiveEdit><group caption="General"><prop caption="realtime" editor="checkbox" value="[@realtime]" description="whether the value of the bound data is
updated as the user types it, or only when this element looses focus or
the user presses enter." values="true|false"/></group></LiveEdit><ChildValue/><DataAction><group caption="General"><prop caption="create-model" editor="checkbox" value="[@create-model]" description="whether the model this element connects
to is extended when the data pointed to does not exist. Defaults to true." values="true|false"/></group><events caption="Events"><prop caption="locksuccess" editor="textbox" value="[@locksuccess]" type="event" description="Fires when a lock request succeeds"/><prop caption="lockfailed" editor="textbox" value="[@lockfailed]" type="event" description="Fires when a lock request failes"/><prop caption="unlocksuccess" editor="textbox" value="[@unlocksuccess]" type="event" description="Fires when an unlock request succeeds"/><prop caption="unlockfailed" editor="textbox" value="[@unlockfailed]" type="event" description="Fires when an unlock request fails"/></events></DataAction><Cache><group caption="General"><prop caption="caching" editor="checkbox" value="[@caching]" description="whether caching is enabled for this element." values="true|false"/></group></Cache><Rename><group caption="General"><prop caption="rename" editor="checkbox" value="[@rename]" description="whether the user can start renaming rendered nodes in this element." values="true|false"/></group><events caption="Events"><prop caption="stoprename" editor="textbox" value="[@stoprename]" type="event" description="Fires when a rename action is cancelled."/></events></Rename><Docking/><BaseButton><group caption="General"><prop caption="background" editor="textbox" value="[@background]" description="sets a multistate background. The arguments
are seperated by pipes '|' and are in the order of:
'imagefilename|mapdirection|nrofstates|imagesize'
The mapdirection argument may have the value of 'vertical' or 'horizontal'.
The nrofstates argument specifies the number of states the iconfile contains:
1 - normal
2 - normal, hover
3 - normal, hover, down
4 - normal, hover, down, disabled
The imagesize argument specifies how high or wide each icon is inside the
map, depending of the mapdirection argument.
"/></group><events caption="Events"><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this element and then let's the mousebutton go."/></events></BaseButton><BaseTab><group caption="General"><prop caption="activepagenr" editor="textbox" value="[@activepagenr]" description="the child number of the active page."/><prop caption="activepage" editor="textbox" value="[@activepage]" description="the name of the active page."/></group><events caption="Events"><prop caption="beforeswitch" editor="textbox" value="[@beforeswitch]" type="event" description="Fires before this element switches to another page."/><prop caption="afterswitch" editor="textbox" value="[@afterswitch]" type="event" description="Fires after this element has switched to another page."/></events></BaseTab><Focussable/><Media><group caption="General"><prop caption="seeking" editor="checkbox" value="[@seeking]" values="true|false"/><prop caption="autoplay" editor="checkbox" value="[@autoplay]" values="true|false"/><prop caption="controls" editor="checkbox" value="[@controls]" values="true|false"/><prop caption="ready" editor="checkbox" value="[@ready]" values="true|false"/><prop caption="bufferedBytes" editor="textbox" value="[@bufferedbytes]"/><prop caption="totalBytes" editor="textbox" value="[@totalbytes]"/><prop caption="readyState" editor="textbox" value="[@readystate]"/><prop caption="position" editor="textbox" value="[@position]"/><prop caption="currentTime" editor="textbox" value="[@currenttime]"/><prop caption="volume" editor="textbox" value="[@volume]"/><prop caption="muted" editor="checkbox" value="[@muted]" values="true|false"/><prop caption="paused" editor="checkbox" value="[@paused]" values="true|false"/><prop caption="type" editor="textbox" value="[@type]"/><prop caption="src" editor="textbox" value="[@src]"/><prop caption="ID3" editor="textbox" value="[@id3]"/></group></Media><BaseSimple/><A11y/><BaseTree><group caption="General"><prop caption="openadd" editor="checkbox" value="[@openadd]" description="whether the tree expands the parent to which a node is added. Defaults to true." values="true|false"/><prop caption="startcollapsed" editor="checkbox" value="[@startcollapsed]" description="whether the tree collapses all nodes that contain children on load. Defaults to true." values="true|false"/><prop caption="nocollapse" editor="checkbox" value="[@nocollapse]" description="whether the user cannot collapse a node. Defaults to false." values="true|false"/><prop caption="singleopen" editor="checkbox" value="[@singleopen]" description="whether the tree will expand a node by a single click. Defaults to false." values="true|false"/><prop caption="prerender" editor="checkbox" value="[@prerender]" description="whether the tree will render all the nodes at load. Defaults to true." values="true|false"/></group><events caption="Events"><prop caption="expand" editor="textbox" value="[@expand]" type="event" description="Fires when a tree leaf is expanded from collapsed view to
reveal its children leaves."/><prop caption="collapse" editor="textbox" value="[@collapse]" type="event" description="Fires when a tree leaf is collapsed from expanded view to
conceal its children leaves."/><prop caption="click" editor="textbox" value="[@click]" type="event" description="Fires when the user presses a mousebutton while over this
element and then let's the mousebutton go."/></events></BaseTree><Transaction><group caption="General"><prop caption="autoshow" editor="checkbox" value="[@autoshow]" description="whether this element is shown when a transaction begins." values="true|false"/></group><events caption="Events"><prop caption="transactionconflict" editor="textbox" value="[@transactionconflict]" type="event" description="Fires when data in a transaction is being updated by an external process."/></events></Transaction><BaseList><group caption="General"><prop caption="fill" editor="textbox" value="[@fill]" description="the set of items that should be loaded into this
element. A start and an end seperated by a -."/></group><events caption="Events"><prop caption="notunique" editor="textbox" value="[@notunique]" type="event" description="Fires when the more attribute is set and an item is added that has a caption that already exists in the list."/></events></BaseList><VirtualViewport/><BaseStateButtons><group caption="General"><prop caption="state" editor="dropdown" value="[@state]" description="the state of the window. The state can be a
combination of multiple states seperated by a pipe '|' character."><item value="normal">normal</item><item value="minimized">minimized</item><item value="maximized">maximized</item><item value="edit">edit</item><item value="closed">closed</item></prop><prop caption="buttons" editor="dropdown" value="[@buttons]" description="the buttons that the window displays. This
can be multiple values seperated by a pipe '|' character."><item value="min">min</item><item value="max">max</item><item value="close">close</item><item value="edit">edit</item></prop></group></BaseStateButtons><Teleport><group caption="General"><prop caption="url" editor="textbox" value="[@url]" description="the location of the server that is
recipient of the rpc messages."/><prop caption="route-server" editor="textbox" value="[@route-server]" description="String specifying the url to the route script."/><prop caption="autoroute" editor="checkbox" value="[@autoroute]" description="whether the call should be routed
through a proxy when a permission
error occurs due to the same domein policy." values="true|false"/><prop caption="timeout" editor="textbox" value="[@timeout]" description="the number of milliseconds after
which the call is considered timed out.
"/></group></Teleport><Interactive><group caption="General"><prop caption="draggable" editor="checkbox" value="[@draggable]" description="whether an element is draggable. The user will
able to move the element around while holding the mouse button down on the
element." values="true|false"/><prop caption="resizable" editor="checkbox" value="[@resizable]" description="whether an element is resizable. The user will able
to resize the element by grabbing one of the four edges of the element and
pulling it in either direction. Grabbing the corners allows users to
resize horizontally and vertically at the same time. The right bottom corner
is special, because it offers an especially big grab area. The size of this
area can be configured in the skin of the element." values="true|false"/><prop caption="minwidth" editor="textbox" value="[@minwidth]" description="the minimum horizontal size the element can get when resizing."/><prop caption="minheight" editor="textbox" value="[@minheight]" description="the minimum vertical size the element can get when resizing."/><prop caption="maxwidth" editor="textbox" value="[@maxwidth]" description="the maximum horizontal size the element can get when resizing."/><prop caption="maxheight" editor="textbox" value="[@maxheight]" description="the maximum vertical size the element can get when resizing."/></group><events caption="Events"><prop caption="drag" editor="textbox" value="[@drag]" type="event" description="Fires when the widget has been dragged."/><prop caption="resizestart" editor="textbox" value="[@resizestart]" type="event" description="Fires before the widget is resized."/><prop caption="resize" editor="textbox" value="[@resize]" type="event" description="Fires when the widget has been resized."/></events></Interactive><DelayedRender><group caption="General"><prop caption="render" editor="dropdown" value="[@render]" description="when the contents of this element is rendered."><item value="init">init</item><item value="runtime">runtime</item></prop><prop caption="use-render-delay" editor="checkbox" value="[@use-render-delay]" description="whether there's a short delay between showing this element and rendering it's contents." values="true|false"/></group><events caption="Events"><prop caption="beforerender" editor="textbox" value="[@beforerender]" type="event" description="Fires before elements are rendered. Use this event to display a loader."/><prop caption="afterrender" editor="textbox" value="[@afterrender]" type="event" description="Fires after elements are rendered. User this event to hide a loader."/></events></DelayedRender><DragDrop><group caption="General"><prop caption="drag" editor="checkbox" value="[@drag]" description="whether the element allows dragging of it's items." values="true|false"/><prop caption="dragcopy" editor="checkbox" value="[@dragcopy]" description="whether dragged items are copied." values="true|false"/><prop caption="drop" editor="checkbox" value="[@drop]" description="whether the element allows items to be dropped." values="true|false"/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" description="the name of the dragdrop element for this element.
&lt;code&gt;
&lt;a:tree align=&quot;left&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;a:each match=&quot;[root|account|folder|mail]&quot;&gt;
&lt;a:caption match  = &quot;[@name]&quot; /&gt;
&lt;a:drag    match  = &quot;[folder|mail]&quot; /&gt;
&lt;a:drop    match  = &quot;[folder]&quot;
target = &quot;[folder|account]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;a:drop   match  = &quot;[mail]&quot;
target = &quot;[folder]&quot;
action = &quot;tree-append&quot; /&gt;
&lt;/a:each&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;root name=&quot;Root&quot;&gt;
&lt;account name=&quot;Account 1&quot;&gt;
&lt;folder name=&quot;Folder 1&quot;&gt;
&lt;mail name=&quot;Mail drag drop&quot;&gt;&lt;/mail&gt;
&lt;/folder&gt;
&lt;/account&gt;
&lt;/root&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:tree&gt;

&lt;a:list bindings=&quot;bndDragdrop&quot; align=&quot;right&quot;&gt;
&lt;a:model&gt;
&lt;data&gt;
&lt;mail name=&quot;Mail 1&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 2&quot;&gt;&lt;/mail&gt;
&lt;mail name=&quot;Mail 3&quot;&gt;&lt;/mail&gt;
&lt;/data&gt;
&lt;/a:model&gt;
&lt;/a:list&gt;

&lt;a:bindings id=&quot;bndDragdrop&quot;&gt;
&lt;a:caption match=&quot;[@name]&quot; /&gt;
&lt;a:each match=&quot;[mail]&quot; /&gt;
&lt;a:drag match = &quot;[mail]&quot; /&gt;
&lt;a:drop
match = &quot;[mail]&quot;
action = &quot;list-append&quot; /&gt;
&lt;/a:bindings&gt;
&lt;/code&gt;"/></group><events caption="Events"><prop caption="dragdata" editor="textbox" value="[@dragdata]" type="event" description="Fires before a drag&amp;drop operation is started to determine the data that is dragged."/><prop caption="dragstart" editor="textbox" value="[@dragstart]" type="event" description="Fires before a drag operation is started."/><prop caption="dragover" editor="textbox" value="[@dragover]" type="event" description="Fires when the users drags over this aml element."/><prop caption="dragout" editor="textbox" value="[@dragout]" type="event" description="Fires when the user moves away from this aml element."/><prop caption="dragdrop" editor="textbox" value="[@dragdrop]" type="event" description="Fires when the user drops an item on this aml element."/></events></DragDrop><MultiCheck><events caption="Events"><prop caption="beforecheck" editor="textbox" value="[@beforecheck]" type="event" description="Fires before a check is made"/><prop caption="aftercheck" editor="textbox" value="[@aftercheck]" type="event" description="Fires after a check is made
"/><prop caption="beforeuncheck" editor="textbox" value="[@beforeuncheck]" type="event" description="Fires before a uncheck is made"/><prop caption="afteruncheck" editor="textbox" value="[@afteruncheck]" type="event" description="Fires after a uncheck is made
"/></events></MultiCheck><BindingRule/></props>